<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clive xiang 的博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on clive xiang 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 20 Oct 2020 20:10:12 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx 常用命令</title>
      <link>http://localhost:1313/post/nginx/nginx-demo/</link>
      <pubDate>Mon, 19 Oct 2020 20:25:50 +0800</pubDate>
      
      <guid>http://localhost:1313/post/nginx/nginx-demo/</guid>
      
        <description>&lt;p&gt;nginx 的使用比较简单，就是几条命令。&lt;/p&gt;
&lt;p&gt;常用到的命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
nginx -s stop 快速关闭 Nginx，可能不保存相关信息，并迅速终止 web 服务。
nginx -s quit 平稳关闭 Nginx，保存相关信息，有安排的结束 web 服务。
nginx -s reload 因改变了 Nginx 相关配置，需要重新加载配置而重载。
nginx -s reopen 重新打开日志文件。
nginx -c filename 为 Nginx 指定一个配置文件，来代替缺省的。
nginx -t 不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。
nginx -v 显示 nginx 的版本。
nginx -V 显示 nginx 的版本，编译器版本和配置参数。
如果不想每次都敲命令，可以在 nginx 安装目录下新添一个启动批处理文件 startup.bat，双击即可运行。内容如下：

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;如果启动前已经启动-nginx-并记录下-pid-文件会-kill-指定进程&#34;&gt;如果启动前已经启动 nginx 并记录下 pid 文件，会 kill 指定进程&lt;/h4&gt;
&lt;h5 id=&#34;nginxexe--s-stop&#34;&gt;nginx.exe -s stop&lt;/h5&gt;
&lt;h4 id=&#34;测试配置文件语法正确性&#34;&gt;测试配置文件语法正确性&lt;/h4&gt;
&lt;h5 id=&#34;nginxexe--t--c-confnginxconf&#34;&gt;nginx.exe -t -c conf/nginx.conf&lt;/h5&gt;
&lt;h4 id=&#34;显示版本信息&#34;&gt;显示版本信息&lt;/h4&gt;
&lt;h5 id=&#34;nginxexe--v&#34;&gt;nginx.exe -v&lt;/h5&gt;
&lt;h4 id=&#34;按照指定配置去启动-nginx&#34;&gt;按照指定配置去启动 nginx&lt;/h4&gt;
&lt;h5 id=&#34;nginxexe--c-confnginxconf&#34;&gt;nginx.exe -c conf/nginx.conf&lt;/h5&gt;
</description>
      
    </item>
    
    <item>
      <title>Nginx 常见使用场景</title>
      <link>http://localhost:1313/post/nginx/nginx-use/</link>
      <pubDate>Mon, 19 Oct 2020 20:25:50 +0800</pubDate>
      
      <guid>http://localhost:1313/post/nginx/nginx-use/</guid>
      
        <description>&lt;h3 id=&#34;跨域问题&#34;&gt;跨域问题&lt;/h3&gt;
&lt;h4 id=&#34;在工作中有时候会遇到一些接口不支持跨域这时候可以简单的添加-add_headers-来支持-cors-跨域配置如下&#34;&gt;在工作中，有时候会遇到一些接口不支持跨域，这时候可以简单的添加 add_headers 来支持 cors 跨域。配置如下：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;server {
  listen 80;
  server_name api.xxx.com;
  add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;
  add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;
  add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET,POST,HEAD&#39;;
  location / {
    proxy_pass http://127.0.0.1:3000;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host  $http_host;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;上面更改头信息还有一种使用-rewrite-指令重定向-uri-来解决跨域问题&#34;&gt;上面更改头信息，还有一种，使用 rewrite 指令重定向 URI 来解决跨域问题。&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;upstream test {
  server 127.0.0.1:8080;
  server localhost:8081;
}
server {
  listen 80;
  server_name api.xxx.com;
  location / {
    root  html;                   #去请求../html文件夹里的文件
    index  index.html index.htm;  #首页响应地址
  }
  # 用于拦截请求，匹配任何以 /api/开头的地址，
  # 匹配符合以后，停止往下搜索正则。
  location ^~/api/{
    # 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用，
    # 例如www.a.com/proxy/api/msg?meth=1&amp;amp;par=2重写，只对/proxy/api/msg重写。
    # rewrite后面的参数是一个简单的正则 ^/api/(.*)$，
    # $1代表正则中的第一个()，$2代表第二个()的值，以此类推。
    rewrite ^/api/(.*)$ /$1 break;
    # 把请求代理到其他主机
    # 其中 http://www.b.com/ 写法和 http://www.b.com写法的区别如下
    # 如果你的请求地址是他 http://server/html/test.jsp
    # 配置一： http://www.b.com/ 后面有“/”
    #         将反向代理成 http://www.b.com/html/test.jsp 访问
    # 配置一： http://www.b.com 后面没有有“/”
    #         将反向代理成 http://www.b.com/test.jsp 访问
    proxy_pass http://test;
    # 如果 proxy_pass  URL 是 http://a.xx.com/platform/ 这种情况
    # proxy_cookie_path应该设置成 /platform/ / (注意两个斜杠之间有空格)。
    proxy_cookie_path /platfrom/ /;
    # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header
    # 设置 Cookie 头通过
    proxy_pass_header Set-Cookie;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;跳转到带-www-的域上面&#34;&gt;跳转到带 www 的域上面&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    # 配置正常的带www的域名
    server_name www.wangchujiang.com;
    root /home/www/wabg/download;
    location / {
        try_files $uri $uri/ /index.html =404;
    }
}
server {
    # 这个要放到下面，
    # 将不带www的 wangchujiang.com 永久性重定向到  https://www.wangchujiang.com
    server_name wangchujiang.com;
    rewrite ^(.*) https://www.wangchujiang.com$1 permanent;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;代理转发&#34;&gt;代理转发&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;upstream server-api{
    # api 代理服务地址
    server 127.0.0.1:3110;
}
upstream server-resource{
    # 静态资源 代理服务地址
    server 127.0.0.1:3120;
}
server {
    listen       3111;
    server_name  localhost;      # 这里指定域名
    root /home/www/server-statics;
    # 匹配 api 路由的反向代理到API服务
    location ^~/api/ {
        rewrite ^/(.*)$ /$1 break;
        proxy_pass http://server-api;
    }
    # 假设这里验证码也在API服务中
    location ^~/captcha {
        rewrite ^/(.*)$ /$1 break;
        proxy_pass http://server-api;
    }
    # 假设你的图片资源全部在另外一个服务上面
    location ^~/img/ {
        rewrite ^/(.*)$ /$1 break;
        proxy_pass http://server-resource;
    }
    # 路由在前端，后端没有真实路由，在路由不存在的 404状态的页面返回 /index.html
    # 这个方式使用场景，你在写React或者Vue项目的时候，没有真实路由
    location / {
        try_files $uri $uri/ /index.html =404;
        #                               ^ 空格很重要
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;监控状态信息&#34;&gt;监控状态信息&lt;/h4&gt;
&lt;h4 id=&#34;通过-nginx--v-来查看是否有-with-http_stub_status_module-该模块&#34;&gt;通过 nginx -V 来查看是否有 with-http_stub_status_module 该模块。&lt;/h4&gt;
&lt;h4 id=&#34;nginx--v-这里-v-是大写的如果是小写的-v-即-nginx--v则不会出现有哪些模块只会出现-nginx-的版本&#34;&gt;nginx -V 这里 V 是大写的，如果是小写的 v 即 nginx -v，则不会出现有哪些模块，只会出现 nginx 的版本&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;location /nginx_status {
    stub_status on;
    access_log off;
}
通过 http://127.0.0.1/nginx_status 访问出现下面结果。

Active connections: 3
server accepts handled requests
 7 7 5
Reading: 0 Writing: 1 Waiting: 2
主动连接(第 1 行)
当前与http建立的连接数，包括等待的客户端连接：3

服务器接受处理的请求(第 2~3 行)
接受的客户端连接总数目：7
处理的客户端连接总数目：7
客户端总的请求数目：5

读取其它信(第 4 行)
当前，nginx读请求连接
当前，nginx写响应返回给客户端
目前有多少空闲客户端请求连接

代理转发连接替换
location ^~/api/upload {
    rewrite ^/(.*)$ /wfs/v1/upload break;
    proxy_pass http://wfs-api;
}
ssl配置
超文本传输安全协议（缩写：HTTPS，英语：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。HTTPS 目前已经是所有注重隐私和安全的网站的首选，随着技术的不断发展，HTTPS 网站已不再是大型网站的专利，所有普通的个人站长和博客均可以自己动手搭建一个安全的加密的网站。

创建SSL证书，如果你购买的证书，就可以直接下载

sudo mkdir /etc/nginx/ssl
# 创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。
sudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt
# 上面命令，会有下面需要填写内容
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:New York
Locality Name (eg, city) []:New York City
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.
Organizational Unit Name (eg, section) []:Ministry of Water Slides
Common Name (e.g. server FQDN or YOUR name) []:your_domain.com
Email Address []:admin@your_domain.com
创建自签证书

首先，创建证书和私钥的目录
# mkdir -p /etc/nginx/cert
# cd /etc/nginx/cert
创建服务器私钥，命令会让你输入一个口令：
# openssl genrsa -des3 -out nginx.key 2048
创建签名请求的证书（CSR）：
# openssl req -new -key nginx.key -out nginx.csr
在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：
# cp nginx.key nginx.key.org
# openssl rsa -in nginx.key.org -out nginx.key
最后标记证书使用上述私钥和CSR：
# openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt
查看目前nginx编译选项

sbin/nginx -V
输出下面内容

nginx version: nginx/1.7.8
built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)
TLS SNI support enabled
configure arguments: --prefix=/usr/local/nginx-1.7.8 --with-http_ssl_module --with-http_spdy_module --with-http_stub_status_module --with-pcre
如果依赖的模块不存在，可以进入安装目录，输入下面命令重新编译安装。

./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module
运行完成之后还需要make (不用make install)

# 备份nginx的二进制文件
cp -rf /usr/local/nginx/sbin/nginx　 /usr/local/nginx/sbin/nginx.bak
# 覆盖nginx的二进制文件
cp -rf objs/nginx   /usr/local/nginx/sbin/
HTTPS server
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;server {
listen 443 ssl;
server_name localhost;
ssl_certificate /etc/nginx/ssl/nginx.crt;
ssl_certificate_key /etc/nginx/ssl/nginx.key; # 禁止在 header 中出现服务器版本，防止黑客利用版本漏洞攻击
server_tokens off; # 设置 ssl/tls 会话缓存的类型和大小。如果设置了这个参数一般是 shared，buildin 可能会参数内存碎片，默认是 none，和 off 差不多，停用缓存。如 shared:SSL:10m 表示我所有的 nginx 工作进程共享 ssl 会话缓存，官网介绍说 1M 可以存放约 4000 个 sessions。
ssl_session_cache shared:SSL:1m; # 客户端可以重用会话缓存中 ssl 参数的过期时间，内网系统默认 5 分钟太短了，可以设成 30m 即 30 分钟甚至 4h。
ssl_session_timeout 5m; # 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。 # 这里指定的是 OpenSSL 库能够识别的写法，你可以通过 openssl -v cipher &#39;RC4:HIGH:!aNULL:!MD5&#39;（后面是你所指定的套件加密算法） 来看所支持算法。
ssl_ciphers HIGH:!aNULL:!MD5; # 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。
ssl_prefer_server_ciphers on;
location / {
root html;
index index.html index.htm;
}
}
强制将 http 重定向到 https
server {
listen 80;
server_name example.com;
rewrite ^ https://$http_host$request_uri? permanent; # 强制将 http 重定向到 https # 在错误页面和“服务器”响应头字段中启用或禁用发射 nginx 版本。 防止黑客利用版本漏洞攻击
server_tokens off;
}
两个虚拟主机
纯静态-html 支持

http {
server {
listen 80;
server*name www.domain1.com;
access_log logs/domain1.access.log main;
location / {
index index.html;
root /var/www/domain1.com/htdocs;
}
}
server {
listen 80;
server_name www.domain2.com;
access_log logs/domain2.access.log main;
location / {
index index.html;
root /var/www/domain2.com/htdocs;
}
}
}
虚拟主机标准配置
http {
server {
listen 80 default;
server_name * \*;
access_log logs/default.access.log main;
location / {
index index.html;
root /var/www/default/htdocs;
}
}
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;爬虫过滤&#34;&gt;爬虫过滤&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;根据 User-Agent 过滤请求，通过一个简单的正则表达式，就可以过滤不符合要求的爬虫请求(初级爬虫)。

~\* 表示不区分大小写的正则匹配

location / {
if ($http_user_agent ~* &amp;quot;python|curl|java|wget|httpclient|okhttp&amp;quot;) {
        return 503;
    }
    # 正常处理
    # ...
}
防盗链
location ~* \.(gif|jpg|png|swf|flv)$ {
root html
valid_referers none blocked \*.nginxcn.com;
if (\$invalid_referer) {
rewrite ^/ www.nginx.cn
#return 404;
}
}
虚拟目录配置
alias 指定的目录是准确的，root 是指定目录的上级目录，并且该上级目录要含有 location 指定名称的同名目录。

location /img/ {
alias /var/www/image/;
}

# 访问/img/目录里面的文件时，ningx 会自动去/var/www/image/目录找文件

location /img/ {
root /var/www/image;
}

# 访问/img/目录下的文件时，nginx 会去/var/www/image/img/目录下找文件。]

防盗图配置
location ~ \/public\/(css|js|img)\/._\.(js|css|gif|jpg|jpeg|png|bmp|swf) {
valid_referers none blocked _.jslite.io;
if (\$invalid_referer) {
rewrite ^/ http://wangchujiang.com/piratesp.png;
}
}
屏蔽.git 等文件
location ~ (.git|.gitattributes|.gitignore|.svn) {
deny all;
}
域名路径加不加需要都能正常访问
http://wangchujiang.com/api/index.php?a=1&amp;amp;name=wcj
^ 有后缀
http://wangchujiang.com/api/index?a=1&amp;amp;name=wcj
^ 没有后缀
nginx rewrite 规则如下：

rewrite ^/(.\*)/$ /index.php?/$1 permanent;
if (!-d $request_filename){
        set $rule_1 1$rule_1;
}
if (!-f $request_filename){
set $rule_1 2$rule_1;
}
if (\$rule_1 = &amp;quot;21&amp;quot;){
rewrite ^/ /index.php last;
}

&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Nginx 常见错误</title>
      <link>http://localhost:1313/post/nginx/nginx-error/</link>
      <pubDate>Mon, 19 Oct 2020 20:25:50 +0800</pubDate>
      
      <guid>http://localhost:1313/post/nginx/nginx-error/</guid>
      
        <description>&lt;pre&gt;&lt;code&gt;The plain HTTP request was sent to HTTPS port
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;解决办法fastcgi_param-https-https-if_not_empty-添加这条规则&#34;&gt;解决办法，fastcgi_param HTTPS $https if_not_empty 添加这条规则，&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 443 ssl; # 注意这条规则
    server_name  my.domain.com;
    fastcgi_param HTTPS $https if_not_empty;
    fastcgi_param HTTPS on;
    ssl_certificate /etc/ssl/certs/your.pem;
    ssl_certificate_key /etc/ssl/private/your.key;
    location / {
        # Your config here...
    }
}

&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Python Ansible 自动化部署 K8S 集群 </title>
      <link>http://localhost:1313/post/k8s/python-ansible/</link>
      <pubDate>Mon, 19 Oct 2020 15:45:06 +0800</pubDate>
      
      <guid>http://localhost:1313/post/k8s/python-ansible/</guid>
      
        <description>&lt;h2 id=&#34;11-ansible-介绍&#34;&gt;1.1 Ansible 介绍&lt;/h2&gt;
&lt;p&gt;Ansible 是一种 IT 自动化工具。它可以配置系统，部署软件以及协调更高级的 IT 任务，例如持续部署，滚动更新。Ansible 适用于管理企业 IT 基础设施，从具有少数主机的小规模到数千个实例的企业环境。Ansible 也是一种简单的自动化语言，可以完美地描述 IT 应用程序基础结构。&lt;/p&gt;
&lt;p&gt;具备以下三个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单：减少学习成本&lt;/li&gt;
&lt;li&gt;强大：协调应用程序生命周期&lt;/li&gt;
&lt;li&gt;无代理：可预测，可靠和安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用文档：https://releases.ansible.com/ansible/&lt;/p&gt;
&lt;p&gt;安装 Ansible：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum -y install ansible
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://k8s-1252881505.cos.ap-beijing.myqcloud.com/k8s-2/ansible.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inventory：Ansible 管理的主机信息，包括 IP 地址、SSH 端口、账号、密码等&lt;/li&gt;
&lt;li&gt;Modules：任务均有模块完成，也可以自定义模块，例如经常用的脚本。&lt;/li&gt;
&lt;li&gt;Plugins：使用插件增加 Ansible 核心功能，自身提供了很多插件，也可以自定义插件。例如 connection 插件，用于连接目标主机。&lt;/li&gt;
&lt;li&gt;Playbooks：“剧本”，模块化定义一系列任务，供外部统一调用。Ansible 核心功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-主机清单&#34;&gt;1.2 主机清单&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[webservers]
192.168.20.232
192.168.20.233
192.168.20.234
192.168.20.235
192.168.20.236

[dbservers]
db01.intranet.mydomain.net
db02.intranet.mydomain.net
10.25.1.232
10.25.1.233

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa
ssh-copy-id -i /root/.ssh/id_rsa.pub -p &#39;20100&#39; &#39;root@192.168.20.231&#39;
ssh-copy-id -i /root/.ssh/id_rsa.pub -p &#39;20100&#39; &#39;root@192.168.20.232&#39;
ssh-copy-id -i /root/.ssh/id_rsa.pub -p &#39;20100&#39; &#39;root@192.168.20.23
chown 0700 -R /root/.ssh/
cat /root/.ssh/id_rsa.pub &amp;gt; /root/.ssh/authorized_keys
chown root.root -R /root/.ssh/
cd /root/.ssh/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sed -i &amp;ldquo;s/#host_key_checking = .*/host_key_checking = False/g&amp;rdquo; /etc/ansible/ansible.cfg&lt;/p&gt;
&lt;h2 id=&#34;13-命令行使用&#34;&gt;1.3 命令行使用&lt;/h2&gt;
&lt;h3 id=&#34;1连接远程主机认证&#34;&gt;1、连接远程主机认证&lt;/h3&gt;
&lt;p&gt;SSH 密码认证：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[webservers]
192.168.20.232:20100 ansible_ssh_user=root ansible_ssh_pass=’200271200’
192.168.20.233:20100 ansible_ssh_user=root ansible_ssh_pass=’200271200’
192.168.20.234:20100 ansible_ssh_user=root ansible_ssh_port=’200271200’

[dbservers]
db01.intranet.mydomain.net
db02.intranet.mydomain.net
10.25.1.56
10.25.1.57

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SSH 密钥对认证：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[webservers]
10.206.240.111:22 ansible_ssh_user=root ansible_ssh_key=/root/.ssh/id_rsa
10.206.240.112:22 ansible_ssh_user=root

也可以在配置文件中指定：
[defaults]
private_key_file = /root/.ssh/id_rsa  # 默认路径

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2常用选项&#34;&gt;2、常用选项&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-C, &amp;ndash;check&lt;/td&gt;
&lt;td&gt;运行检查，不执行任何操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-e EXTRA_VARS,&amp;ndash;extra-vars=EXTRA_VARS&lt;/td&gt;
&lt;td&gt;设置附加变量 key=value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-u REMOTE_USER, &amp;ndash;user=REMOTE_USER&lt;/td&gt;
&lt;td&gt;SSH 连接用户，默认 None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-k, &amp;ndash;ask-pass&lt;/td&gt;
&lt;td&gt;SSH 连接用户密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-b, &amp;ndash;become&lt;/td&gt;
&lt;td&gt;提权，默认 root&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-K, &amp;ndash;ask-become-pass&lt;/td&gt;
&lt;td&gt;提权密码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3命令行使用&#34;&gt;3、命令行使用&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-ansible&#34; data-lang=&#34;ansible&#34;&gt;ansible all -m ping
ansible all -m shell -a &amp;quot;ls /root&amp;quot; -u root -k
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;14-常用模块&#34;&gt;1.4 常用模块&lt;/h2&gt;
&lt;p&gt;ansible-doc –l 查看所有模块&lt;/p&gt;
&lt;p&gt;ansible-doc –s copy 查看模块文档&lt;/p&gt;
&lt;h3 id=&#34;1shell&#34;&gt;1、shell&lt;/h3&gt;
&lt;p&gt;在目标主机执行 shell 命令。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: 将命令结果输出到指定文件
  shell: somescript.sh &amp;gt;&amp;gt; somelog.txt
- name: 切换目录执行命令
  shell:
    cmd: ls -l | grep log
    chdir: somedir/
- name: 编写脚本
  shell: |
      if [ 0 -eq 0 ]; then
         echo yes &amp;gt; /tmp/result
      else
         echo no &amp;gt; /tmp/result
      fi
  args:
    executable: /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2copy&#34;&gt;2、copy&lt;/h3&gt;
&lt;p&gt;将文件复制到远程主机。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: 拷贝文件
  copy:
    src: /srv/myfiles/foo.conf
    dest: /etc/foo.conf
    owner: foo
    group: foo
    mode: u=rw,g=r,o=r
    # mode: u+rw,g-wx,o-rwx
    # mode: &#39;0644&#39;
    backup: yes
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3file&#34;&gt;3、file&lt;/h3&gt;
&lt;p&gt;管理文件和文件属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: 创建目录
  file:
    path: /etc/some_directory
    state: directory
    mode: &#39;0755&#39;
- name: 删除文件
  file:
    path: /etc/foo.txt
    state: absent
- name: 递归删除目录
  file:
    path: /etc/foo
    state: absent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;present，latest：表示安装&lt;/p&gt;
&lt;p&gt;absent：表示卸载&lt;/p&gt;
&lt;h3 id=&#34;4yum&#34;&gt;4、yum&lt;/h3&gt;
&lt;p&gt;软件包管理。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible webservers -m yum -a &amp;quot;name=http://nginx.org/packages/rhel/7/x86_64/RPMS/nginx-1.16.1-1.el7.ngx.x86_64.rpm state=present&amp;quot;


ansible webservers -m systemd -a &amp;quot;name=http://nginx.org/packages/rhel/7/x86_64/RPMS/nginx-1.16.1-1.el7.ngx.x86_64.rpm state=restarted enabled=yes&amp;quot;







&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;- name: 安装最新版apache
  yum:
    name: httpd
    state: latest
- name: 安装列表中所有包
  yum:
    name:
      - nginx
      - postgresql
      - postgresql-server
    state: present
- name: 卸载apache包
  yum:
    name: httpd
    state: absent
- name: 更新所有包
  yum:
    name: &#39;*&#39;
    state: latest
- name: 安装nginx来自远程repo
  yum:
    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
    # name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
    state: present
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5servicesystemd&#34;&gt;5、service/systemd&lt;/h3&gt;
&lt;p&gt;管理服务。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: 服务管理
  service:
    name: httpd
    state: started
    #state: stopped
    #state: restarted
    #state: reloaded
- name: 设置开机启动
  service:
    name: httpd
    enabled: yes
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;6unarchive&#34;&gt;6、unarchive&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;- name: 解压
  unarchive:
    src=test.tar.gz
    dest=/tmp
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;7debug&#34;&gt;7、debug&lt;/h3&gt;
&lt;p&gt;执行过程中打印语句。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- debug:
    msg: System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}

- name: 显示主机已知的所有变量
  debug:
    var: hostvars[inventory_hostname]
    verbosity: 4
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;15-变量&#34;&gt;1.5 变量&lt;/h2&gt;
&lt;p&gt;变量是应用于多个主机的便捷方式； 实际在主机执行之前，变量会对每个主机添加，然后在执行中引用。&lt;/p&gt;
&lt;h3 id=&#34;1主机变量与组变量&#34;&gt;1、主机变量与组变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[webservers]
192.168.1.100 ansible_ssh_user=root hostname=web1
192.168.1.100 ansible_ssh_user=root hostname=web2

[webservers:vars]
ansible_ssh_user=root hostname=web1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2register-变量&#34;&gt;2、Register 变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;- shell: /usr/bin/uptime
  register: result
- debug:
    var: result
    verbosity: 2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;16-playbook&#34;&gt;1.6 Playbook&lt;/h2&gt;
&lt;p&gt;Playbooks 是 Ansible 的配置，部署和编排语言。他们可以描述您希望在远程机器做哪些事或者描述 IT 流程中一系列步骤。使用易读的 YAML 格式组织 Playbook 文件。&lt;/p&gt;
&lt;p&gt;如果 Ansible 模块是您工作中的工具，那么 Playbook 就是您的使用说明书，而您的主机资产文件就是您的原材料。&lt;/p&gt;
&lt;p&gt;与 adhoc 任务执行模式相比，Playbooks 使用 ansible 是一种完全不同的方式，并且功能特别强大。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/latest/user_guide/playbooks.html&#34;&gt;https://docs.ansible.com/ansible/latest/user_guide/playbooks.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: webservers
  vars:
    http_port: 80
    server_name: www.ctnrs.com
  remote_user: root
  gather_facts: false
  tasks:
  - name: 安装nginx最新版
    yum: pkg=nginx state=latest
  - name: 写入nginx配置文件
    template: src=http://localhost:1313/srv/httpd.j2 dest=/etc/nginx/nginx.conf
    notify:
    - restart nginx
  - name: 确保nginx正在运行
    service: name=httpd state=started
  handlers:
    - name: restart nginx
      service: name=nginx state=reloaded
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;1主机和用户&#34;&gt;1、主机和用户&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;- hosts: webservers
  remote_user: root
  become: yes
  become_user: lizhenliang
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2定义变量&#34;&gt;2、定义变量&lt;/h3&gt;
&lt;p&gt;Ansible 中的首选做法是不将变量存储在 Inventory 中。&lt;/p&gt;
&lt;p&gt;除了将变量直接存储在 Inventory 文件之外，主机和组变量还可以存储在相对于 Inventory 文件的单个文件中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: webservers
  vars:
    http_port: 80
    server_name: www.ctnrs.com
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3任务列表&#34;&gt;3、任务列表&lt;/h3&gt;
&lt;p&gt;每个 play 包含一系列任务。这些任务按照顺序执行，在 play 中，所有主机都会执行相同的任务指令。play 目的是将选择的主机映射到任务。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  tasks:
  - name: 安装nginx最新版
    yum: pkg=nginx state=latest
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4语法检查与调试&#34;&gt;4、语法检查与调试&lt;/h3&gt;
&lt;p&gt;语法检查：ansible-playbook &amp;ndash;check /path/to/playbook.yaml&lt;/p&gt;
&lt;p&gt;测试运行，不实际操作：ansible-playbook -C /path/to/playbook.yaml&lt;/p&gt;
&lt;p&gt;debug 模块在执行期间打印语句，对于调试变量或表达式，而不必停止 play。与&amp;rsquo;when：&amp;lsquo;指令一起调试更佳。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: webserver
tasks:
- debug:
msg: {{group_names}}
- debug:
msg: {{inventory_hostname}}
- debug:
msg: {{ansible_hostname}}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5任务控制&#34;&gt;5、任务控制&lt;/h3&gt;
&lt;p&gt;如果你有一个大的剧本，那么能够在不运行整个剧本的情况下运行特定部分可能会很有用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  tasks:
  - name: 安装nginx最新版
    yum: pkg=nginx state=latest
    tags: install
  - name: 写入nginx配置文件
    template: src=http://localhost:1313/srv/httpd.j2 dest=/etc/nginx/nginx.conf
    tags: config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook example.yml --tags &amp;quot;install&amp;quot;
ansible-playbook example.yml --tags &amp;quot;install,config&amp;quot;
ansible-playbook example.yml --skip-tags &amp;quot;install&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;6流程控制&#34;&gt;6、流程控制&lt;/h3&gt;
&lt;p&gt;条件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tasks:
- name: 只在192.168.1.100运行任务
  debug: msg=&amp;quot;{{ansible_default_ipv4.address}}&amp;quot;
  when: ansible_default_ipv4.address == &#39;192.168.1.100&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;循环：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tasks:
- name： 批量创建用户
  user: name={{ item }} state=present groups=wheel
  with_items:
     - testuser1
     - testuser2
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;- name: 解压
  copy: src={{ item }} dest=/tmp
  with_fileglob:
    - &amp;quot;*.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;常用循环语句：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语句&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;with_items&lt;/td&gt;
&lt;td&gt;标准循环&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;with_fileglob&lt;/td&gt;
&lt;td&gt;遍历目录文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;with_dict&lt;/td&gt;
&lt;td&gt;遍历字典&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;7模板&#34;&gt;7、模板&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; tasks:
  - name: 写入nginx配置文件
    template: src=http://localhost:1313/srv/httpd.j2 dest=/etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;定义变量&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% set local_ip = inventory_hostname %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;条件和循环&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% set list=[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;] %}
{% for i in list %}
	{% if i == &#39;two&#39; %}
		-&amp;gt; two
	{% elif loop.index == 3 %}
		-&amp;gt; 3
	{% else %}
		{{i}}
	{% endif %}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如：生成连接 etcd 字符串&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% for host in groups[&#39;etcd&#39;] %}
	https://{{ hostvars[host].inventory_hostname }}:2379
	{% if not loop.last %},{% endif %}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;里面也可以用 ansible 的变量。&lt;/p&gt;
&lt;h2 id=&#34;17-roles&#34;&gt;1.7 Roles&lt;/h2&gt;
&lt;p&gt;Roles 是基于已知文件结构自动加载某些变量文件，任务和处理程序的方法。按角色对内容进行分组，适合构建复杂的部署环境。&lt;/p&gt;
&lt;h3 id=&#34;1定义-roles&#34;&gt;1、定义 Roles&lt;/h3&gt;
&lt;p&gt;Roles 目录结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;site.yml
webservers.yml
fooservers.yml
roles/
   common/
     tasks/
     handlers/
     files/
     templates/
     vars/
     defaults/
     meta/
   webservers/
     tasks/
     defaults/
     meta/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tasks&lt;/code&gt; -包含角色要执行的任务的主要列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handlers&lt;/code&gt; -包含处理程序，此角色甚至在此角色之外的任何地方都可以使用这些处理程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaults&lt;/code&gt;-角色的默认变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt;-角色的其他变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;files&lt;/code&gt; -包含可以通过此角色部署的文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;templates&lt;/code&gt; -包含可以通过此角色部署的模板。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meta&lt;/code&gt;-为此角色定义一些元数据。请参阅下面的更多细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常的做法是从&lt;code&gt;tasks/main.yml&lt;/code&gt;文件中包含特定于平台的任务：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# roles/webservers/tasks/main.yml
- name: added in 2.4, previously you used &#39;include&#39;
  import_tasks: redhat.yml
  when: ansible_facts[&#39;os_family&#39;]|lower == &#39;redhat&#39;
- import_tasks: debian.yml
  when: ansible_facts[&#39;os_family&#39;]|lower == &#39;debian&#39;

# roles/webservers/tasks/redhat.yml
- yum:
    name: &amp;quot;httpd&amp;quot;
    state: present

# roles/webservers/tasks/debian.yml
- apt:
    name: &amp;quot;apache2&amp;quot;
    state: present
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2使用角色&#34;&gt;2、使用角色&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# site.yml
- hosts: webservers
  roles:
    - common
    - webservers


定义多个：
- name: 0
  gather_facts: false
  hosts: all
  roles:
    - common

- name: 1
  gather_facts: false
  hosts: all
  roles:
    - webservers
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3角色控制&#34;&gt;3、角色控制&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;- name: 0.系统初始化
  gather_facts: false
  hosts: all
  roles:
    - common
  tags: common
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4定义变量&#34;&gt;4、定义变量&lt;/h3&gt;
&lt;p&gt;组变量：&lt;/p&gt;
&lt;p&gt;group_vars 存放的是组变量&lt;/p&gt;
&lt;p&gt;group_vars/all.yml 表示所有主机有效，等同于[all:vars]&lt;/p&gt;
&lt;p&gt;grous_vars/etcd.yml 表示 etcd 组主机有效，等同于[etcd:vars]&lt;/p&gt;
&lt;h2 id=&#34;18-自动化部署-k8s离线版&#34;&gt;1.8 自动化部署 K8S（离线版）&lt;/h2&gt;
&lt;h3 id=&#34;1-熟悉二进制部署-k8s-步骤&#34;&gt;1、 熟悉二进制部署 K8S 步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;服务器规划&lt;/strong&gt;
| &lt;strong&gt;角色&lt;/strong&gt; | &lt;strong&gt;IP&lt;/strong&gt; | &lt;strong&gt;组件&lt;/strong&gt; |
| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; |
| k8s-master1 | 192.168.31.61 | kube-apiserver kube-controller-manager kube-scheduler etcd |
| k8s-master2 | 192.168.31.62 | kube-apiserver kube-controller-manager kube-scheduler |
| k8s-node1 | 192.168.31.63 | kubelet kube-proxy docker etcd |
| k8s-node2 | 192.168.31.66 | kubelet kube-proxy docker etcd |
| Load Balancer（Master） | 192.168.31.61 192.168.31.60 (VIP) | nginx keepalived |
| Load Balancer（Backup） | 192.168.31.62 | nginx keepalived |&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统初始化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etcd 集群部署&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;生成 etcd 证书&lt;/li&gt;
&lt;li&gt;部署三个 Etc 集群&lt;/li&gt;
&lt;li&gt;查看集群状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署 Master&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;生成 apiserver 证书&lt;/li&gt;
&lt;li&gt;部署 apiserver、controller-manager 和 scheduler 组件&lt;/li&gt;
&lt;li&gt;启动 TLS Bootstrapping&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署 Node&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;安装 Docker&lt;/li&gt;
&lt;li&gt;部署 kubelet 和 kube-proxy&lt;/li&gt;
&lt;li&gt;在 Master 上允许为新 Node 颁发证书&lt;/li&gt;
&lt;li&gt;授权 apiserver 访问 kubelet&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署插件（准备好镜像）&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;Flannel&lt;/li&gt;
&lt;li&gt;Web UI&lt;/li&gt;
&lt;li&gt;CoreDNS&lt;/li&gt;
&lt;li&gt;Ingress Controller&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Master 高可用&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;增加 Master 节点（与 Master1 一致）&lt;/li&gt;
&lt;li&gt;部署 Nginx 负载均衡器&lt;/li&gt;
&lt;li&gt;Nginx+Keepalived 高可用&lt;/li&gt;
&lt;li&gt;修改 Node 连接 VIP&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2roles-组织-k8s-各组件部署解析&#34;&gt;2、Roles 组织 K8S 各组件部署解析&lt;/h3&gt;
&lt;p&gt;编写建议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;梳理流程和 Roles 结构&lt;/li&gt;
&lt;li&gt;如果配置文件有不固定内容，使用 jinja 渲染&lt;/li&gt;
&lt;li&gt;人工干预改动的内容应统一写到一个文件中&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3下载所需文件&#34;&gt;3、下载所需文件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;确保所有节点系统时间一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载 Ansible 部署文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/lizhenliang/ansible-install-k8s
cd ansible-install-k8s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下载软件包并解压：&lt;/p&gt;
&lt;p&gt;云盘地址：https://pan.baidu.com/s/1lTXolmlcCJbei9HY2BJRPQ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar zxf binary_pkg.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4修改-ansible-文件&#34;&gt;4、修改 Ansible 文件&lt;/h3&gt;
&lt;p&gt;修改 hosts 文件，根据规划修改对应 IP 和名称。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi hosts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改 group_vars/all.yml 文件，修改软件包目录和证书可信任 IP。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim group_vars/all.yml
software_dir: &#39;/root/binary_pkg&#39;
...
cert_hosts:
  k8s:
  etcd:
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5一键部署&#34;&gt;5、一键部署&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;架构图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://k8s-1252881505.cos.ap-beijing.myqcloud.com/k8s-2/single-master.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​ 单 Master 架构&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://k8s-1252881505.cos.ap-beijing.myqcloud.com/k8s-2/multi-master.jpg&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt;
&lt;p&gt;​ 多 Master 架构&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;部署命令&lt;/strong&gt;
单 Master 版：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook -i hosts single-master-deploy.yml -uroot -k
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;多 Master 版：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook -i hosts multi-master-deploy.yml -uroot -k
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;6部署控制&#34;&gt;6、部署控制&lt;/h3&gt;
&lt;p&gt;如果安装某个阶段失败，可针对性测试.&lt;/p&gt;
&lt;p&gt;例如：只运行部署插件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook -i hosts single-master-deploy.yml -uroot -k --tags addons
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例参考：https://github.com/ansible/ansible-examples&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Docker Command</title>
      <link>http://localhost:1313/post/k8s/docker-command/</link>
      <pubDate>Mon, 19 Oct 2020 14:22:38 +0800</pubDate>
      
      <guid>http://localhost:1313/post/k8s/docker-command/</guid>
      
        <description>&lt;h3 id=&#34;杀死所有正在运行的容器&#34;&gt;杀死所有正在运行的容器&lt;/h3&gt;
&lt;p&gt;docker kill $(docker ps -a -q)&lt;/p&gt;
&lt;h3 id=&#34;删除所有已经停止的容器&#34;&gt;删除所有已经停止的容器&lt;/h3&gt;
&lt;p&gt;docker rm $(docker ps -a -q)&lt;/p&gt;
&lt;h3 id=&#34;删除所有未打-dangling-标签的镜&#34;&gt;删除所有未打 dangling 标签的镜&lt;/h3&gt;
&lt;p&gt;docker rmi $(docker images -q -f dangling=true)&lt;/p&gt;
&lt;h3 id=&#34;删除所有镜像&#34;&gt;删除所有镜像&lt;/h3&gt;
&lt;p&gt;docker rmi $(docker images -q)&lt;/p&gt;
&lt;h3 id=&#34;强制删除-无法删除的镜像&#34;&gt;强制删除 无法删除的镜像&lt;/h3&gt;
&lt;p&gt;docker rmi -f &amp;lt;IMAGE_ID&amp;gt;
docker rmi -f $(docker images -q)&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Helm 应用包管理器</title>
      <link>http://localhost:1313/post/k8s/helm/</link>
      <pubDate>Mon, 19 Oct 2020 17:00:42 +0800</pubDate>
      
      <guid>http://localhost:1313/post/k8s/helm/</guid>
      
        <description>&lt;h2 id=&#34;31-为什么需要-helm&#34;&gt;3.1 为什么需要 Helm？&lt;/h2&gt;
&lt;p&gt;K8S 上的应用对象，都是由特定的资源描述组成，包括 deployment、service 等。都保存各自文件中或者集中写到一个配置文件。然后 kubectl apply –f 部署。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://k8s-1252881505.cos.ap-beijing.myqcloud.com/k8s-2/yaml-all.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果应用只由一个或几个这样的服务组成，上面部署方式足够了。&lt;/p&gt;
&lt;p&gt;而对于一个复杂的应用，会有很多类似上面的资源描述文件，例如微服务架构应用，组成应用的服务可能多达十个，几十个。如果有更新或回滚应用的需求，可能要修改和维护所涉及的大量资源文件，而这种组织和管理应用的方式就显得力不从心了。&lt;/p&gt;
&lt;p&gt;且由于缺少对发布过的应用版本管理和控制，使 Kubernetes 上的应用维护和更新等面临诸多的挑战，主要面临以下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;如何将这些服务作为一个整体管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;这些资源文件如何高效复用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不支持应用级别的版本管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;32-helm-介绍&#34;&gt;3.2 Helm 介绍&lt;/h2&gt;
&lt;p&gt;Helm 是一个 Kubernetes 的包管理工具，就像 Linux 下的包管理器，如 yum/apt 等，可以很方便的将之前打包好的 yaml 文件部署到 kubernetes 上。&lt;/p&gt;
&lt;p&gt;Helm 有两个重要概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**helm：**一个命令行客户端工具，主要用于 Kubernetes 应用 chart 的创建、打包、发布和管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Chart：**应用描述，一系列用于描述 k8s 资源相关文件的集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Release：**基于 Chart 的部署实体，一个 chart 被 Helm 运行后将会生成对应的一个 release；将在 k8s 中创建出真实运行的资源对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33-helm-v3-变化&#34;&gt;3.3 Helm v3 变化&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2019 年 11 月 13 日，&lt;/strong&gt; Helm 团队发布 &lt;code&gt;Helm v3 &lt;/code&gt;的第一个稳定版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;该版本主要变化如下：&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-架构变化&#34;&gt;1、 架构变化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;最明显的变化是 &lt;code&gt;Tiller &lt;/code&gt;的删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://k8s-1252881505.cos.ap-beijing.myqcloud.com/k8s-2/helm-arch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2release名称可以在不同命名空间重用&#34;&gt;2、&lt;code&gt;Release&lt;/code&gt;名称可以在不同命名空间重用&lt;/h3&gt;
&lt;h3 id=&#34;3支持将-chart-推送至-docker-镜像仓库中&#34;&gt;3、支持将 Chart 推送至 Docker 镜像仓库中&lt;/h3&gt;
&lt;h3 id=&#34;4使用-jsonschema-验证-chart-values&#34;&gt;4、使用 JSONSchema 验证 chart values&lt;/h3&gt;
&lt;h3 id=&#34;5其他&#34;&gt;5、其他&lt;/h3&gt;
&lt;p&gt;1）为了更好地协调其他包管理者的措辞 &lt;code&gt;Helm CLI &lt;/code&gt;个别更名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm delete` 更名为 `helm uninstall
helm inspect` 更名为 `helm show
helm fetch` 更名为 `helm pull
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但以上旧的命令当前仍能使用。&lt;/p&gt;
&lt;p&gt;2）移除了用于本地临时搭建 &lt;code&gt;Chart Repository &lt;/code&gt;的 &lt;code&gt;helm serve&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;3）自动创建名称空间&lt;/p&gt;
&lt;p&gt;在不存在的命名空间中创建发行版时，Helm 2 创建了命名空间。Helm 3 遵循其他 Kubernetes 对象的行为，如果命名空间不存在则返回错误。&lt;/p&gt;
&lt;p&gt;4） 不再需要&lt;code&gt;requirements.yaml&lt;/code&gt;, 依赖关系是直接在&lt;code&gt;chart.yaml&lt;/code&gt;中定义。&lt;/p&gt;
&lt;h2 id=&#34;34-helm-客户端&#34;&gt;3.4 Helm 客户端&lt;/h2&gt;
&lt;h3 id=&#34;1部署-helm-客户端&#34;&gt;1、部署 Helm 客户端&lt;/h3&gt;
&lt;p&gt;Helm 客户端下载地址：https://github.com/helm/helm/releases&lt;/p&gt;
&lt;p&gt;解压移动到/usr/bin/目录即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gz
tar zxvf helm-v3.0.0-linux-amd64.tar.gz
mv linux-amd64/helm /usr/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2helm-常用命令&#34;&gt;2、Helm 常用命令&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;create&lt;/td&gt;
&lt;td&gt;创建一个 chart 并指定名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dependency&lt;/td&gt;
&lt;td&gt;管理 chart 依赖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;下载一个 release。可用子命令：all、hooks、manifest、notes、values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;history&lt;/td&gt;
&lt;td&gt;获取 release 历史&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;install&lt;/td&gt;
&lt;td&gt;安装一个 chart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;列出 release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package&lt;/td&gt;
&lt;td&gt;将 chart 目录打包到 chart 存档文件中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pull&lt;/td&gt;
&lt;td&gt;从远程仓库中下载 chart 并解压到本地 # helm pull stable/mysql &amp;ndash;untar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repo&lt;/td&gt;
&lt;td&gt;添加，列出，移除，更新和索引 chart 仓库。可用子命令：add、index、list、remove、update&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rollback&lt;/td&gt;
&lt;td&gt;从之前版本回滚&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search&lt;/td&gt;
&lt;td&gt;根据关键字搜索 chart。可用子命令：hub、repo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;show&lt;/td&gt;
&lt;td&gt;查看 chart 详细信息。可用子命令：all、chart、readme、values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;status&lt;/td&gt;
&lt;td&gt;显示已命名版本的状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;template&lt;/td&gt;
&lt;td&gt;本地呈现模板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uninstall&lt;/td&gt;
&lt;td&gt;卸载一个 release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upgrade&lt;/td&gt;
&lt;td&gt;更新一个 release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version&lt;/td&gt;
&lt;td&gt;查看 helm 客户端版本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3配置国内-chart-仓库&#34;&gt;3、配置国内 Chart 仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;微软仓库（http://mirror.azure.cn/kubernetes/charts/）这个仓库强烈推荐，基本上官网有的chart这里都有。&lt;/li&gt;
&lt;li&gt;阿里云仓库（https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts ）&lt;/li&gt;
&lt;li&gt;官方仓库（https://hub.kubeapps.com/charts/incubator）官方chart仓库，国内有点不好使。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加存储库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm repo add stable http://mirror.azure.cn/kubernetes/charts
helm repo add aliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts
helm repo update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看配置的存储库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm repo list
helm search repo stable
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一直在 stable 存储库中安装 charts，你可以配置其他存储库。&lt;/p&gt;
&lt;p&gt;删除存储库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm repo remove aliyun
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;35-helm-基本使用&#34;&gt;3.5 Helm 基本使用&lt;/h2&gt;
&lt;p&gt;主要介绍三个命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;chart install&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;chart update&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;chart rollback&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1使用-chart-部署一个应用&#34;&gt;1、使用 chart 部署一个应用&lt;/h3&gt;
&lt;p&gt;查找 chart：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm search repo
# helm search repo mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为什么 mariadb 也在列表中？因为他和 mysql 有关。&lt;/p&gt;
&lt;p&gt;查看 chart 信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm show chart stable/mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm install db stable/mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看发布状态：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm status db
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2安装前自定义-chart-配置选项&#34;&gt;2、安装前自定义 chart 配置选项&lt;/h3&gt;
&lt;p&gt;上面部署的 mysql 并没有成功，这是因为并不是所有的 chart 都能按照默认配置运行成功，可能会需要一些环境依赖，例如 PV。&lt;/p&gt;
&lt;p&gt;所以我们需要自定义 chart 配置选项，安装过程中有两种方法可以传递配置数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash;values（或-f）：指定带有覆盖的 YAML 文件。这可以多次指定，最右边的文件优先&lt;/li&gt;
&lt;li&gt;&amp;ndash;set：在命令行上指定替代。如果两者都用，&amp;ndash;set 优先级高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ndash;values 使用，先将修改的变量写到一个文件中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm show values stable/mysql
# cat config.yaml
persistence:
  enabled: true
  storageClass: &amp;quot;managed-nfs-storage&amp;quot;
  accessMode: ReadWriteOnce
  size: 8Gi
mysqlUser: &amp;quot;k8s&amp;quot;
mysqlPassword: &amp;quot;123456&amp;quot;
mysqlDatabase: &amp;quot;k8s&amp;quot;
# helm install db -f config.yaml stable/mysql
# kubectl get pods
NAME                                      READY   STATUS    RESTARTS   AGE
db-mysql-57485b68dc-4xjhv                 1/1     Running   0          8m51s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上将创建具有名称的默认 MySQL 用户 k8s，并授予此用户访问新创建的 k8s 数据库的权限，但将接受该图表的所有其余默认值。&lt;/p&gt;
&lt;p&gt;命令行替代变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm install db --set persistence.storageClass=&amp;quot;managed-nfs-storage&amp;quot; stable/mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以把 chart 包下载下来查看详情：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm pull stable/mysql --untar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;values yaml 与 set 使用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://k8s-1252881505.cos.ap-beijing.myqcloud.com/k8s-2/yaml-set.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;该 helm install 命令可以从多个来源安装：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chart 存储库&lt;/li&gt;
&lt;li&gt;本地 chart 存档（helm install foo-0.1.1.tgz）&lt;/li&gt;
&lt;li&gt;chart 目录（helm install path/to/foo）&lt;/li&gt;
&lt;li&gt;完整的 URL（helm install &lt;a href=&#34;https://example.com/charts/foo-1.2.3.tgz&#34;&gt;https://example.com/charts/foo-1.2.3.tgz&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3构建一个-helm-chart&#34;&gt;3、构建一个 Helm Chart&lt;/h3&gt;
&lt;p&gt;先给学员自动生成目录讲解，然后再手动给学员创建目录和各个文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm create mychart
Creating mychart
# tree mychart/
mychart/
├── charts
├── Chart.yaml
├── templates
│   ├── deployment.yaml
│   ├── _helpers.tpl
│   ├── ingress.yaml
│   ├── NOTES.txt
│   └── service.yaml
└── values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Chart.yaml：用于描述这个 Chart 的基本信息，包括名字、描述信息以及版本等。&lt;/li&gt;
&lt;li&gt;values.yaml ：用于存储 templates 目录中模板文件中用到变量的值。&lt;/li&gt;
&lt;li&gt;Templates： 目录里面存放所有 yaml 模板文件。&lt;/li&gt;
&lt;li&gt;charts：目录里存放这个 chart 依赖的所有子 chart。&lt;/li&gt;
&lt;li&gt;NOTES.txt ：用于介绍 Chart 帮助信息， helm install 部署后展示给用户。例如：如何使用这个 Chart、列出缺省的设置等。&lt;/li&gt;
&lt;li&gt;_helpers.tpl：放置模板助手的地方，可以在整个 chart 中重复使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建 Chart 后，接下来就是将其部署：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm install web mychart/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以打包推送的 charts 仓库共享别人使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm package mychart/
mychart-0.1.0.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4升级回滚和删除&#34;&gt;4、升级、回滚和删除&lt;/h3&gt;
&lt;p&gt;发布新版本的 chart 时，或者当您要更改发布的配置时，可以使用该&lt;code&gt;helm upgrade&lt;/code&gt; 命令。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm upgrade --set imageTag=1.17 web mychart
# helm upgrade -f values.yaml web mychart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果在发布后没有达到预期的效果，则可以使用&lt;code&gt;helm rollback &lt;/code&gt;回滚到之前的版本。&lt;/p&gt;
&lt;p&gt;例如将应用回滚到第一个版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm rollback web 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;卸载发行版，请使用以下&lt;code&gt;helm uninstall&lt;/code&gt;命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm uninstall web
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看历史版本配置信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm get --revision 1 web
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;36-chart-模板&#34;&gt;3.6 Chart 模板&lt;/h2&gt;
&lt;p&gt;Helm 最核心的就是模板，即模板化的 K8S manifests 文件。&lt;/p&gt;
&lt;p&gt;它本质上就是一个 Go 的 template 模板。Helm 在 Go template 模板的基础上，还会增加很多东西。如一些自定义的元数据信息、扩展的库以及一些类似于编程形式的工作流，例如条件语句、管道等等。这些东西都会使得我们的模板变得更加丰富。&lt;/p&gt;
&lt;h3 id=&#34;1模板&#34;&gt;1、模板&lt;/h3&gt;
&lt;p&gt;有了模板，我们怎么把我们的配置融入进去呢？用的就是这个 values 文件。这两部分内容其实就是 chart 的核心功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rm -rf mychart/templates/*
# vi templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上，这已经是一个可安装的 Chart 包了，通过 &lt;code&gt;helm install&lt;/code&gt;命令来进行安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm install web mychart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样部署，其实与直接 apply 没什么两样。&lt;/p&gt;
&lt;p&gt;然后使用如下命令可以看到实际的模板被渲染过后的资源文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm get manifest web
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，这与刚开始写的内容是一样的，包括名字、镜像等，我们希望能在一个地方统一定义这些会经常变换的字段，这就需要用到 Chart 的模板了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vi templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个 deployment 就是一个 Go template 的模板，这里定义的 Release 模板对象属于 Helm 内置的一种对象，是从 values 文件中读取出来的。这样一来，我们可以将需要变化的地方都定义变量。&lt;/p&gt;
&lt;p&gt;再执行 helm install chart 可以看到现在生成的名称变成了&lt;strong&gt;web-deployment&lt;/strong&gt;，证明已经生效了。也可以使用命令 helm get manifest 查看最终生成的文件内容。&lt;/p&gt;
&lt;h3 id=&#34;2调试&#34;&gt;2、调试&lt;/h3&gt;
&lt;p&gt;Helm 也提供了&lt;code&gt;--dry-run --debug&lt;/code&gt;调试参数，帮助你验证模板正确性。在执行&lt;code&gt;helm install&lt;/code&gt;时候带上这两个参数就可以把对应的 values 值和渲染的资源清单打印出来，而不会真正的去部署一个 release。&lt;/p&gt;
&lt;p&gt;比如我们来调试上面创建的 chart 包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm install web2 --dry-run /root/mychart
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3内置对象&#34;&gt;3、内置对象&lt;/h3&gt;
&lt;p&gt;刚刚我们使用 &lt;code&gt;{{.Release.Name}}&lt;/code&gt;将 release 的名称插入到模板中。这里的 Release 就是 Helm 的内置对象，下面是一些常用的内置对象：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release.Name&lt;/th&gt;
&lt;th&gt;release 名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Release.Time&lt;/td&gt;
&lt;td&gt;release 的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release.Namespace&lt;/td&gt;
&lt;td&gt;release 的 namespace（如果清单未覆盖）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release.Service&lt;/td&gt;
&lt;td&gt;release 服务的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release.Revision&lt;/td&gt;
&lt;td&gt;此 release 的修订版本号，从 1 开始累加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release.IsUpgrade&lt;/td&gt;
&lt;td&gt;如果当前操作是升级或回滚，则将其设置为 true。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release.IsInstall&lt;/td&gt;
&lt;td&gt;如果当前操作是安装，则设置为 true。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4values&#34;&gt;4、Values&lt;/h3&gt;
&lt;p&gt;Values 对象是为 Chart 模板提供值，这个对象的值有 4 个来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;chart 包中的 values.yaml 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父 chart 包的 values.yaml 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 helm install 或者 helm upgrade 的 &lt;code&gt;-f&lt;/code&gt;或者 &lt;code&gt;--values&lt;/code&gt;参数传入的自定义的 yaml 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;--set&lt;/code&gt; 参数传入的值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;chart 的 values.yaml 提供的值可以被用户提供的 values 文件覆盖，而该文件同样可以被 &lt;code&gt;--set&lt;/code&gt;提供的参数所覆盖。&lt;/p&gt;
&lt;p&gt;这里我们来重新编辑 mychart/values.yaml 文件，将默认的值全部清空，然后添加一个副本数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat values.yaml
replicas: 3
image: &amp;quot;nginx&amp;quot;
imageTag: &amp;quot;1.17&amp;quot;
# cat templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: {{ .Values.image }}:{{ .Values.imageTag }}
        name: nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看渲染结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm install --dry-run web ../mychart/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;values 文件也可以包含结构化内容，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat values.yaml
...
label:
  project: ms
  app: nginx

# cat templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      project: {{ .Values.label.project }}
      app: {{ .Values.label.app }}
  template:
    metadata:
      labels:
        project: {{ .Values.label.project }}
        app: {{ .Values.label.app }}
    spec:
      containers:
      - image: {{ .Values.image }}:{{ .Values.imageTag }}
        name: nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看渲染结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm install --dry-run web ../mychart/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5管道与函数&#34;&gt;5、管道与函数&lt;/h3&gt;
&lt;p&gt;前面讲的模块，其实就是将值传给模板引擎进行渲染，模板引擎还支持对拿到数据进行二次处理。&lt;/p&gt;
&lt;p&gt;例如从.Values 中读取的值变成字符串，可以使用&lt;code&gt;quote&lt;/code&gt;函数实现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vi templates/deployment.yaml
app: {{ quote .Values.label.app }}
# helm install --dry-run web ../mychart/
        project: ms
        app: &amp;quot;nginx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;quote .Values.label.app 将后面的值作为参数传递给 quote 函数。&lt;/p&gt;
&lt;p&gt;模板函数调用语法为：functionName arg1 arg2&amp;hellip;&lt;/p&gt;
&lt;p&gt;另外还会经常使用一个 default 函数，该函数允许在模板中指定默认值，以防止该值被忽略掉。&lt;/p&gt;
&lt;p&gt;例如忘记定义，执行 helm install 会因为缺少字段无法创建资源，这时就可以定义一个默认值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat values.yaml
replicas: 2
# cat templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;- name: {{ .Values.name | default &amp;quot;nginx&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;其他函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缩进：{{ .Values.resources | indent 12 }}&lt;/p&gt;
&lt;p&gt;大写：{{ upper .Values.resources }}&lt;/p&gt;
&lt;p&gt;首字母大写：{{ title .Values.resources }}&lt;/p&gt;
&lt;h3 id=&#34;6流程控制&#34;&gt;6、流程控制&lt;/h3&gt;
&lt;p&gt;流程控制是为模板提供了一种能力，满足更复杂的数据逻辑处理。&lt;/p&gt;
&lt;p&gt;Helm 模板语言提供以下流程控制语句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if/else&lt;/code&gt; 条件块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with&lt;/code&gt; 指定范围&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range&lt;/code&gt; 循环块&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;if&#34;&gt;if&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;if/else&lt;/code&gt;块是用于在模板中有条件地包含文本块的方法，条件块的基本结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if PIPELINE }}
  # Do something
{{ else if OTHER PIPELINE }}
  # Do something else
{{ else }}
  # Default case
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;条件判断就是判断条件是否为真，如果值为以下几种情况则为 false：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个布尔类型的 &lt;code&gt;假&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个数字 &lt;code&gt;零&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个 &lt;code&gt;空&lt;/code&gt;的字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个 &lt;code&gt;nil&lt;/code&gt;（空或 &lt;code&gt;null&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个空的集合（ &lt;code&gt;map&lt;/code&gt;、 &lt;code&gt;slice&lt;/code&gt;、 &lt;code&gt;tuple&lt;/code&gt;、 &lt;code&gt;dict&lt;/code&gt;、 &lt;code&gt;array&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面的这些情况外，其他所有条件都为 &lt;code&gt;真&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如，如果.Values.env.hello 值为 world，则值为 hello: true&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat values.yaml
replicas: 2
label:
  project: ms
  app: product
env:
  hello: &amp;quot;world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# cat templates/deploymemt.yaml
        env:
        {{ if eq .Values.env.hello &amp;quot;world&amp;quot; }}
          - name: hello
            value: 123
        {{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中运算符 &lt;code&gt;eq&lt;/code&gt;是判断是否相等的操作，除此之外，还有 &lt;code&gt;ne&lt;/code&gt;、 &lt;code&gt;lt&lt;/code&gt;、 &lt;code&gt;gt&lt;/code&gt;、 &lt;code&gt;and&lt;/code&gt;、 &lt;code&gt;or&lt;/code&gt;等运算符。&lt;/p&gt;
&lt;p&gt;通过模板引擎来渲染一下，会得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# helm install --dry-run web ../mychart/
...
        env:

          - name: hello
            value: 123
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到渲染出来会有多余的空行，这是因为当模板引擎运行时，会将控制指令删除，所有之前占的位置也就空白了，需要使用{{- if &amp;hellip;}} 的方式消除此空行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat templates/deploymemt.yaml
...
        env:
        {{- if eq .Values.env.hello &amp;quot;world&amp;quot; }}
          - name: hello
            value: 123
        {{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在是不是没有多余的空格了，如果使用&lt;code&gt;-}}&lt;/code&gt;需谨慎，比如上面模板文件中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat templates/deploymemt.yaml
...
       env:
        {{- if eq .Values.env.hello &amp;quot;world&amp;quot; -}}
           - hello: true
        {{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这会渲染成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        env:- hello: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为&lt;code&gt;-}}&lt;/code&gt;它删除了双方的换行符。&lt;/p&gt;
&lt;h4 id=&#34;with&#34;&gt;with&lt;/h4&gt;
&lt;p&gt;with ：控制变量作用域。&lt;/p&gt;
&lt;p&gt;其语法和一个简单的 &lt;code&gt;if&lt;/code&gt;语句比较类似：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ with PIPELINE }}
  #  restricted scope
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;with&lt;/code&gt;语句可以允许将当前范围 &lt;code&gt;.&lt;/code&gt;设置为特定的对象，比如我们前面一直使用的 &lt;code&gt;.Values.label&lt;/code&gt;，我们可以使用 &lt;code&gt;with&lt;/code&gt;来将 &lt;code&gt;.&lt;/code&gt;范围指向 &lt;code&gt;.Values.label&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name | default &amp;quot;web&amp;quot; }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      project: {{ .Values.label.project }}
      app: {{ .Values.label.app }}
  template:
    metadata:
      labels:
        project: {{ .Values.label.project }}
        app: {{ .Values.label.app }}
      {{- with .Values.label }}
        project: {{ .project }}
        app: {{ .app }}
      {{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面增加了一个{{- with .Values.label }} xxx {{- end }}的一个块，这样的话就可以在当前的块里面直接引用 &lt;code&gt;.project&lt;/code&gt;和 &lt;code&gt;.app&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;需要注意的在 &lt;code&gt;with&lt;/code&gt;声明的范围内，将无法从父范围访问到其他对象了，比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      {{- with .Values.label }}
        project: {{ .project }}
        app: {{ .app }}
        {{ .Release.Name }}
      {{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;range&#34;&gt;range&lt;/h4&gt;
&lt;p&gt;在 Helm 模板语言中，使用 &lt;code&gt;range&lt;/code&gt;关键字来进行循环操作。&lt;/p&gt;
&lt;p&gt;我们在 &lt;code&gt;values.yaml&lt;/code&gt;文件中添加上一个变量列表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat values.yaml
replicas: 2
label:
  project: ms
  app: product
env:
  hello: &amp;quot;world&amp;quot;
  test: &amp;quot;yes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;循环打印该列表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        env:
        {{- range .Values.env }}
           {{ . }}
        {{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;循环内部我们使用的是一个 &lt;code&gt;.&lt;/code&gt;，这是因为当前的作用域就在当前循环内，这个 &lt;code&gt;.&lt;/code&gt;引用的当前读取的元素。&lt;/p&gt;
&lt;p&gt;但结果并不是我们所期望的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    env:
       - name: world
         value: world
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;讲师：李振良&lt;/p&gt;
&lt;p&gt;官方网站： &lt;a href=&#34;http://www.ctnrs.com&#34;&gt;http://www.ctnrs.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>Https 反向代理</title>
      <link>http://localhost:1313/post/nginx/nginx-https/</link>
      <pubDate>Sat, 19 Sep 2020 17:00:42 +0800</pubDate>
      
      <guid>http://localhost:1313/post/nginx/nginx-https/</guid>
      
        <description>&lt;h3 id=&#34;https-反向代理&#34;&gt;Https 反向代理&lt;/h3&gt;
&lt;h4 id=&#34;一些对安全性要求比较高的站点可能会使用-https一种使用-ssl-通信标准的安全-http-协议&#34;&gt;一些对安全性要求比较高的站点，可能会使用 HTTPS（一种使用 ssl 通信标准的安全 HTTP 协议）。&lt;/h4&gt;
&lt;h4 id=&#34;这里不科普-http-协议和-ssl-标准但是使用-nginx-配置-https-需要知道几点&#34;&gt;这里不科普 HTTP 协议和 SSL 标准。但是，使用 nginx 配置 https 需要知道几点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HTTPS 的固定端口号是 443，不同于 HTTP 的 80 端口&lt;/li&gt;
&lt;li&gt;SSL 标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他和 http 反向代理基本一样，只是在 Server 部分配置有些不同。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  #HTTP服务器
  server {
      #监听443端口。443为知名端口号，主要用于HTTPS协议
      listen       443 ssl;
      #定义使用www.xx.com访问
      server_name  www.helloworld.com;
      #ssl证书文件位置(常见证书文件格式为：crt/pem)
      ssl_certificate      cert.pem;
      #ssl证书key位置
      ssl_certificate_key  cert.key;
      #ssl配置参数（选择性配置）
      ssl_session_cache    shared:SSL:1m;
      ssl_session_timeout  5m;
      #数字签名，此处使用MD5
      ssl_ciphers  HIGH:!aNULL:!MD5;
      ssl_prefer_server_ciphers  on;
      location / {
          root   /root;
          index  index.html index.htm;
      }
  }
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Https 负载均衡</title>
      <link>http://localhost:1313/post/nginx/nginx-upstrem/</link>
      <pubDate>Sat, 19 Sep 2020 17:00:42 +0800</pubDate>
      
      <guid>http://localhost:1313/post/nginx/nginx-upstrem/</guid>
      
        <description>&lt;h3 id=&#34;nginx-实现简单的负载均衡功能&#34;&gt;nginx 实现简单的负载均衡功能。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/image/nginx-up.png&#34; alt=&#34;This is an image in static/image folder.&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;假设这样一个应用场景将应用部署在-192168111801921681128019216811380-三台-linux-环境的服务器上网站域名叫-wwwhelloworldcom公网-ip-为-192168111在公网-ip-所在的服务器上部署-nginx对所有请求做负载均衡处理下面例子中使用的是加权轮询策略&#34;&gt;假设这样一个应用场景：将应用部署在 192.168.1.11:80、192.168.1.12:80、192.168.1.13:80 三台 linux 环境的服务器上。网站域名叫 &lt;a href=&#34;http://www.helloworld.com&#34;&gt;www.helloworld.com&lt;/a&gt;，公网 IP 为 192.168.1.11。在公网 IP 所在的服务器上部署 nginx，对所有请求做负载均衡处理（下面例子中使用的是加权轮询策略）。&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;nginx.conf 配置如下：

http { #设定 mime 类型,类型由 mime.type 文件定义
include /etc/nginx/mime.types;
default_type application/octet-stream; #设定日志格式
access_log /var/log/nginx/access.log; #设定负载均衡的服务器列表
upstream load_balance_server {
#weigth 参数表示权值，权值越高被分配到的几率越大
server 192.168.1.11:80 weight=5;
server 192.168.1.12:80 weight=1;
server 192.168.1.13:80 weight=6;
}
#HTTP 服务器
server { #侦听 80 端口
listen 80; #定义使用www.xx.com访问
server_name www.helloworld.com; #对所有请求进行负载均衡请求
location / {
root /root; #定义服务器的默认网站根目录位置
index index.html index.htm; #定义首页索引文件的名称
proxy_pass http://load_balance_server ;#请求转向 load_balance_server 定义的服务器列表 #以下是一些反向代理的配置(可选择性配置)
#proxy_redirect off;
proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr; #后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP
proxy_set_header X-Forwarded-For \$remote_addr;
proxy_connect_timeout 90; #nginx 跟后端服务器连接超时时间(代理连接超时)
proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
proxy_buffers 4 32k; #proxy_buffers 缓冲区，网页平均在 32k 以下的话，这样设置
proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers\*2）
proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从 upstream 服务器传
client_max_body_size 10m; #允许客户端请求的最大单文件字节数
client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;负载均衡策略
Nginx 提供了多种负载均衡策略，让我们来一一了解一下：&lt;/p&gt;
&lt;p&gt;负载均衡策略在各种分布式系统中基本上原理一致，对于原理有兴趣，不妨参考 负载均衡&lt;/p&gt;
&lt;p&gt;轮询&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;upstream bck_testing_01 {

# 默认所有服务器权重为 1

server 192.168.250.220:8080
server 192.168.250.221:8080
server 192.168.250.222:8080
}
加权轮询
upstream bck_testing_01 {
server 192.168.250.220:8080 weight=3
server 192.168.250.221:8080 # default weight=1
server 192.168.250.222:8080 # default weight=1
}
最少连接
upstream bck_testing_01 {
least_conn;

# with default weight for all (weight=1)

server 192.168.250.220:8080
server 192.168.250.221:8080
server 192.168.250.222:8080
}
加权最少连接
upstream bck_testing_01 {
least_conn;
server 192.168.250.220:8080 weight=3
server 192.168.250.221:8080 # default weight=1
server 192.168.250.222:8080 # default weight=1
}
IP Hash
upstream bck_testing_01 {
ip_hash;

# with default weight for all (weight=1)

server 192.168.250.220:8080
server 192.168.250.221:8080
server 192.168.250.222:8080
}
普通 Hash
upstream bck_testing_01 {
hash \$request_uri;

# with default weight for all (weight=1)

server 192.168.250.220:8080
server 192.168.250.221:8080
server 192.168.250.222:8080
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>关于</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;向春晓， 32 岁, 10 年经验, 运维工程师 湖南 - 攸县&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sysu.edu.cn/cn/#&#34;&gt;中山大学&lt;/a&gt; 本科&lt;/p&gt;
&lt;p&gt;邮箱 : &lt;a href=&#34;mailto:clivexiang@outlook.com&#34;&gt;clivexiang@outlook.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微信 : 13480642977&lt;/p&gt;
&lt;p&gt;电话 : 13480642977&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;希望参与 :&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;docker ，k8s 运维&lt;/li&gt;
&lt;li&gt;python 运维开发&lt;/li&gt;
&lt;li&gt;Linux 维护&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以独立负责功能模块或者整个应用的开发&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://clivexiang.github.io&#34;&gt;个人博客(需梯子)&lt;/a&gt; | &lt;a href=&#34;https://github.com/clivexiang&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;技术栈&#34;&gt;技术栈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前端 : vue&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端 : python, php&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统: Linux ,Windows 运维&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用中间价: nginx, php-fpm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考试认证： CKA, RHCE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;近期工作内容&#34;&gt;近期工作内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;zabbix 监控运维&lt;/li&gt;
&lt;li&gt;nginx 中间件维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;项目--优化&#34;&gt;项目 &amp;amp; 优化&lt;/h2&gt;
&lt;h2 id=&#34;工作经历&#34;&gt;工作经历&lt;/h2&gt;
&lt;h4 id=&#34;北京卡卡罗特科技有限公司httpwwwbaibianwukongcomfirstpage-20167---20175&#34;&gt;&lt;a href=&#34;http://www.baibianwukong.com/#firstPage&#34;&gt;北京卡卡罗特科技有限公司&lt;/a&gt; (2016.7 - 2017.5)&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>Http 反向代理</title>
      <link>http://localhost:1313/post/jane-theme-preview.zh-cn/</link>
      <pubDate>Tue, 06 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/jane-theme-preview.zh-cn/</guid>
      
        <description>&lt;h2 id=&#34;http-反向代理&#34;&gt;Http 反向代理&lt;/h2&gt;
&lt;h3 id=&#34;我们先实现一个小目标不考虑复杂的配置仅仅是完成一个-http-反向代理&#34;&gt;我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。&lt;/h3&gt;
&lt;h3 id=&#34;nginxconf-配置文件如下&#34;&gt;nginx.conf 配置文件如下:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
#运行用户
#user somebody;
#启动进程,通常设置成和cpu的数量相等
worker_processes  1;
#全局错误日志
error_log  D:/Tools/nginx-1.10.1/logs/error.log;
error_log  D:/Tools/nginx-1.10.1/logs/notice.log  notice;
error_log  D:/Tools/nginx-1.10.1/logs/info.log  info;
#PID文件，记录当前启动的nginx的进程ID
pid        D:/Tools/nginx-1.10.1/logs/nginx.pid;
#工作模式及连接数上限
events {
    worker_connections 1024;    #单个后台worker process进程的最大并发链接数
}
#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
    #设定mime类型(邮件支持类型),类型由mime.types文件定义
    include       D:/Tools/nginx-1.10.1/conf/mime.types;
    default_type  application/octet-stream;
    #设定日志
    log_format  main  &#39;[$remote_addr] - [$remote_user] [$time_local] &amp;quot;$request&amp;quot; &#39;
                      &#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39;
                      &#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&#39;;
    access_log    D:/Tools/nginx-1.10.1/logs/access.log main;
    rewrite_log     on;
    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;
    #连接超时时间
    keepalive_timeout  120;
    tcp_nodelay        on;
    #gzip压缩开关
    #gzip  on;
    #设定实际的服务器列表
    upstream zp_server1{
        server 127.0.0.1:8089;
    }
    #HTTP服务器
    server {
        #监听80端口，80端口是知名端口号，用于HTTP协议
        listen       80;
        #定义使用www.xx.com访问
        server_name  www.helloworld.com;
        #首页
        index index.html
        #指向webapp的目录
        root D:\01_Workspace\Project\github\zp\SpringNotes\spring-security\spring-shiro\src\main\webapp;
        #编码格式
        charset utf-8;
        #代理配置参数
        proxy_connect_timeout 180;
        proxy_send_timeout 180;
        proxy_read_timeout 180;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarder-For $remote_addr;
        #反向代理的路径（和upstream绑定），location 后面设置映射的路径
        location / {
            proxy_pass http://zp_server1;
        }
        #静态文件，nginx自己处理
        location ~ ^/(images|javascript|js|css|flash|media|static)/ {
            root D:\01_Workspace\Project\github\zp\SpringNotes\spring-security\spring-shiro\src\main\webapp\views;
            #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。
            expires 30d;
        }
        #设定查看Nginx状态的地址
        location /NginxStatus {
            stub_status           on;
            access_log            on;
            auth_basic            &amp;quot;NginxStatus&amp;quot;;
            auth_basic_user_file  conf/htpasswd;
        }
        #禁止访问 .htxxx 文件
        location ~ /\.ht {
            deny all;
        }
        #错误处理页面（可选择性配置）
        #error_page   404              /404.html;
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，让我们来试试吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动 webapp，注意启动绑定的端口要和 nginx 中的 upstream 设置的端口保持一致。&lt;/li&gt;
&lt;li&gt;更改 host：在 C:\Windows\System32\drivers\etc 目录下的 host 文件中添加一条 DNS 记录&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
127.0.0.1 www.helloworld.com
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;启动前文中 startup.bat 的命令&lt;/li&gt;
&lt;li&gt;在浏览器中访问 &lt;a href=&#34;http://www.helloworld.com&#34;&gt;www.helloworld.com&lt;/a&gt;，不出意外，已经可以访问了。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Go Defer</title>
      <link>http://localhost:1313/post/go/go-defer/</link>
      <pubDate>Tue, 20 Oct 2020 20:10:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-defer/</guid>
      
        <description>&lt;h4 id=&#34;defer-语句会将函数推迟到外层函数返回之后执行&#34;&gt;defer 语句会将函数推迟到外层函数返回之后执行。&lt;/h4&gt;
&lt;p&gt;推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。&lt;/p&gt;
&lt;p&gt;defer.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main
import &amp;quot;fmt&amp;quot;
func main() {
    defer fmt.Println(&amp;quot;world&amp;quot;)
    fmt.Println(&amp;quot;hello&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;defer-栈&#34;&gt;defer 栈&lt;/h4&gt;
&lt;p&gt;推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。&lt;/p&gt;
&lt;p&gt;更多关于 defer 语句的信息，请阅读此博文。&lt;/p&gt;
&lt;p&gt;defer-multi.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
func main() {
    fmt.Println(&amp;quot;counting&amp;quot;)
    for i := 0; i &amp;lt; 10; i++ {
        defer fmt.Println(i)
    }
    fmt.Println(&amp;quot;done&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Go For</title>
      <link>http://localhost:1313/post/go/go-for/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-for/</guid>
      
        <description>&lt;h3 id=&#34;go-只有一种循环结构for-循环&#34;&gt;Go 只有一种循环结构：for 循环。&lt;/h3&gt;
&lt;p&gt;基本的 for 循环由三部分组成，它们用分号隔开：&lt;/p&gt;
&lt;p&gt;初始化语句：在第一次迭代前执行
条件表达式：在每次迭代前求值
后置语句：在每次迭代的结尾执行&lt;/p&gt;
&lt;p&gt;初始化语句通常为一句短变量声明，该变量声明仅在 for 语句的作用域中可见。&lt;/p&gt;
&lt;p&gt;一旦条件表达式的布尔值为 false，循环迭代就会终止。&lt;/p&gt;
&lt;p&gt;注意：和 C、Java、JavaScript 之类的语言不同，Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 { } 则是必须的。&lt;/p&gt;
&lt;p&gt;for.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
func main() {
sum := 0
for i := 0; i &amp;lt; 10; i++ {
    sum += i
     }
fmt.Println(sum)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;初始化语句和后置语句是可选的&#34;&gt;初始化语句和后置语句是可选的。&lt;/h3&gt;
&lt;p&gt;for-continued.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
func main() {
    sum := 1
    for ; sum &amp;lt; 1000; {
        sum += sum
    }
    fmt.Println(sum)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;for-是-go-中的-while&#34;&gt;for 是 Go 中的 “while”&lt;/h3&gt;
&lt;p&gt;此时你可以去掉分号，因为 C 的 while 在 Go 中叫做 for。&lt;/p&gt;
&lt;p&gt;for-is-gos-while.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
func main() {
    sum := 1
    for sum &amp;lt; 1000 {
        sum += sum
    }
    fmt.Println(sum)
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;无限循环
如果省略循环条件，该循环就不会结束，因此无限循环可以写得很紧凑。&lt;/p&gt;
&lt;p&gt;forever.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
func main() {
    for {
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Go if</title>
      <link>http://localhost:1313/post/go/go-if/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-if/</guid>
      
        <description>&lt;h3 id=&#34;go-的-if-语句与-for-循环类似表达式外无需小括号---而大括号---则是必须的&#34;&gt;Go 的 if 语句与 for 循环类似，表达式外无需小括号 ( ) ，而大括号 { } 则是必须的。&lt;/h3&gt;
&lt;p&gt;if.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import (
 &amp;quot;fmt&amp;quot;
 &amp;quot;math&amp;quot;
)
func sqrt(x float64) string {
if x &amp;lt; 0 {
return sqrt(-x) + &amp;quot;i&amp;quot;
}
return fmt.Sprint(math.Sqrt(x))
}
func main() {
 fmt.Println(sqrt(2), sqrt(-4))
}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;if-的简短语句&#34;&gt;if 的简短语句&lt;/h4&gt;
&lt;p&gt;同 for 一样， if 语句可以在条件表达式前执行一个简单的语句。&lt;/p&gt;
&lt;p&gt;该语句声明的变量作用域仅在 if 之内。（在最后的 return 语句处使用 v 看看。）&lt;/p&gt;
&lt;p&gt;if-with-a-short-statement.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)
func pow(x, n, lim float64) float64 {
    if v := math.Pow(x, n); v &amp;lt; lim {
        return v
    }
    return lim
}
func main() {
    fmt.Println(
        pow(3, 2, 10),
        pow(3, 3, 20),
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;if-和-else&#34;&gt;if 和 else&lt;/h4&gt;
&lt;p&gt;在 if 的简短语句中声明的变量同样可以在任何对应的 else 块中使用。（在 main 的 fmt.Println 调用开始前，两次对 pow 的调用均已执行并返回其各自的结果。）&lt;/p&gt;
&lt;p&gt;if-and-else.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)
func pow(x, n, lim float64) float64 {
    if v := math.Pow(x, n); v &amp;lt; lim {
        return v
    } else {
        fmt.Printf(&amp;quot;%g &amp;gt;= %g\n&amp;quot;, v, lim)
    }
    // 这里开始就不能使用 v 了
    return lim
}
func main() {
    fmt.Println(
        pow(3, 2, 10),
        pow(3, 3, 20),
    )
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Go Pakage</title>
      <link>http://localhost:1313/post/go/go-pakage/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-pakage/</guid>
      
        <description>&lt;h4 id=&#34;每个-go-程序都是由包构成的&#34;&gt;每个 Go 程序都是由包构成的。&lt;/h4&gt;
&lt;h4 id=&#34;程序从-main-包开始运行&#34;&gt;程序从 main 包开始运行。&lt;/h4&gt;
&lt;h4 id=&#34;本程序通过导入路径-fmt-和-mathrand-来使用这两个包&#34;&gt;本程序通过导入路径 &amp;ldquo;fmt&amp;rdquo; 和 &amp;ldquo;math/rand&amp;rdquo; 来使用这两个包。&lt;/h4&gt;
&lt;h4 id=&#34;按照约定包名与导入路径的最后一个元素一致例如mathrand-包中的源码均以-package-rand-语句开始&#34;&gt;按照约定，包名与导入路径的最后一个元素一致。例如，&amp;ldquo;math/rand&amp;rdquo; 包中的源码均以 package rand 语句开始。&lt;/h4&gt;
&lt;h4 id=&#34;注意-此程序的运行环境是固定的因此-randintn-总是会返回相同的数字-要得到不同的数字需为生成器提供不同的种子数参见-randseed-练习场中的时间为常量因此你需要用其它的值作为种子数&#34;&gt;注意： 此程序的运行环境是固定的，因此 rand.Intn 总是会返回相同的数字。 （要得到不同的数字，需为生成器提供不同的种子数，参见 rand.Seed。 练习场中的时间为常量，因此你需要用其它的值作为种子数&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;packages.go&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;math/rand&amp;quot;
)
func main() {
fmt.Println(&amp;quot;My favorite number is&amp;quot;, rand.Intn(10))
}


&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Go switch</title>
      <link>http://localhost:1313/post/go/go-switch/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-switch/</guid>
      
        <description>&lt;p&gt;switch 的求值顺序
switch 的 case 语句从上到下顺次执行，直到匹配成功时停止。
（例如，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
switch i {
case 0:
case f():
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 i==0 时 f 不会被调用。）&lt;/p&gt;
&lt;p&gt;switch-evaluation-order.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;time&amp;quot;
)
func main() {
fmt.Println(&amp;quot;When&#39;s Saturday?&amp;quot;)
today := time.Now().Weekday()
switch time.Saturday {
case today + 0:
fmt.Println(&amp;quot;Today.&amp;quot;)
case today + 1:
fmt.Println(&amp;quot;Tomorrow.&amp;quot;)
case today + 2:
fmt.Println(&amp;quot;In two days.&amp;quot;)
default:
fmt.Println(&amp;quot;Too far away.&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;没有条件的-switch&#34;&gt;没有条件的 switch&lt;/h4&gt;
&lt;p&gt;没有条件的 switch 同 switch true 一样。&lt;/p&gt;
&lt;p&gt;这种形式能将一长串 if-then-else 写得更加清晰。&lt;/p&gt;
&lt;p&gt;switch-with-no-condition.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)
func main() {
    t := time.Now()
    switch {
    case t.Hour() &amp;lt; 12:
        fmt.Println(&amp;quot;Good morning!&amp;quot;)
    case t.Hour() &amp;lt; 17:
        fmt.Println(&amp;quot;Good afternoon.&amp;quot;)
    default:
        fmt.Println(&amp;quot;Good evening.&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Go 基本数据类型 变量</title>
      <link>http://localhost:1313/post/go/go-type/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-type/</guid>
      
        <description>&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;
&lt;p&gt;var 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后。&lt;/p&gt;
&lt;p&gt;就像在这个例子中看到的一样，var 语句可以出现在包或函数级别。&lt;/p&gt;
&lt;p&gt;variables.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
var c, python, java bool
func main() {
    var i int
    fmt.Println(i, c, python, java)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;变量的初始化&#34;&gt;变量的初始化&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;变量声明可以包含初始值，每个变量对应一个。

如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。

variables-with-initializers.go

package main
import &amp;quot;fmt&amp;quot;
var i, j int = 1, 2
func main() {
    var c, python, java = true, false, &amp;quot;no!&amp;quot;
    fmt.Println(i, j, c, python, java)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;短变量声明&#34;&gt;短变量声明&lt;/h3&gt;
&lt;p&gt;在函数中，简洁赋值语句 := 可在类型明确的地方代替 var 声明。&lt;/p&gt;
&lt;p&gt;函数外的每个语句都必须以关键字开始（var, func 等等），因此 := 结构不能在函数外使用。&lt;/p&gt;
&lt;p&gt;short-variable-declarations.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
func main() {
    var i, j int = 1, 2
    k := 3
    c, python, java := true, false, &amp;quot;no!&amp;quot;
    fmt.Println(i, j, k, c, python, java)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;基本类型&#34;&gt;基本类型&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // uint8 的别名

rune // int32 的别名
    // 表示一个 Unicode 码点

float32 float64

complex64 complex128
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本例展示了几种类型的变量。 同导入语句一样，变量声明也可以“分组”成一个语法块。&lt;/p&gt;
&lt;p&gt;int, uint 和 uintptr 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽。 当你需要一个整数值时应使用 int 类型，除非你有特殊的理由使用固定大小或无符号的整数类型。&lt;/p&gt;
&lt;p&gt;basic-types.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math/cmplx&amp;quot;
)
var (
    ToBe   bool       = false
    MaxInt uint64     = 1&amp;lt;&amp;lt;64 - 1
    z      complex128 = cmplx.Sqrt(-5 + 12i)
)
func main() {
    fmt.Printf(&amp;quot;Type: %T Value: %v\n&amp;quot;, ToBe, ToBe)
    fmt.Printf(&amp;quot;Type: %T Value: %v\n&amp;quot;, MaxInt, MaxInt)
    fmt.Printf(&amp;quot;Type: %T Value: %v\n&amp;quot;, z, z)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;零值&#34;&gt;零值&lt;/h4&gt;
&lt;p&gt;没有明确初始值的变量声明会被赋予它们的 零值。&lt;/p&gt;
&lt;p&gt;零值是：&lt;/p&gt;
&lt;p&gt;数值类型为 0，
布尔类型为 false，
字符串为 &amp;ldquo;&amp;quot;（空字符串）。
zero.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
func main() {
    var i int
    var f float64
    var b bool
    var s string
    fmt.Printf(&amp;quot;%v %v %v %q\n&amp;quot;, i, f, b, s)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;表达式-tv-将值-v-转换为类型-t&#34;&gt;表达式 T(v) 将值 v 转换为类型 T。&lt;/h3&gt;
&lt;p&gt;一些关于数值的转换：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var i int = 42
var f float64 = float64(i)
var u uint = uint(f)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者，更加简单的形式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
i := 42
f := float64(i)
u := uint(f)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与 C 不同的是，Go 在不同类型的项之间赋值时需要显式转换。试着移除例子中 float64 或 uint 的转换看看会发生什么。&lt;/p&gt;
&lt;p&gt;type-conversions.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)
func main() {
    var x, y int = 3, 4
    var f float64 = math.Sqrt(float64(x*x + y*y))
    var z uint = uint(f)
    fmt.Println(x, y, z)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;类型推导&#34;&gt;类型推导&lt;/h4&gt;
&lt;p&gt;在声明一个变量而不指定其类型时（即使用不带类型的 := 语法或 var = 表达式语法），变量的类型由右值推导得出。&lt;/p&gt;
&lt;p&gt;当右值声明了类型时，新变量的类型与其相同：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var i int
j := i // j 也是一个 int
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过当右边包含未指明类型的数值常量时，新变量的类型就可能是 int, float64 或 complex128 了，这取决于常量的精度：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
i := 42           // int
f := 3.142        // float64
g := 0.867 + 0.5i // complex128
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试修改示例代码中 v 的初始值，并观察它是如何影响类型的。&lt;/p&gt;
&lt;p&gt;type-inference.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
func main() {
    v := 42 // 修改这里！
    fmt.Printf(&amp;quot;v is of type %T\n&amp;quot;, v)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;常量的声明与变量类似只不过是使用-const-关键字&#34;&gt;常量的声明与变量类似，只不过是使用 const 关键字。&lt;/h4&gt;
&lt;p&gt;常量可以是字符、字符串、布尔值或数值。&lt;/p&gt;
&lt;p&gt;常量不能用 := 语法声明。&lt;/p&gt;
&lt;p&gt;constants.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
package main
import &amp;quot;fmt&amp;quot;
const Pi = 3.14
func main() {
    const World = &amp;quot;世界&amp;quot;
    fmt.Println(&amp;quot;Hello&amp;quot;, World)
    fmt.Println(&amp;quot;Happy&amp;quot;, Pi, &amp;quot;Day&amp;quot;)
    const Truth = true
    fmt.Println(&amp;quot;Go rules?&amp;quot;, Truth)
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Math Preview</title>
      <link>http://localhost:1313/post/math-preview/</link>
      <pubDate>Mon, 04 Mar 2019 16:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/math-preview/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://www.intmath.com/cg5/katex-mathjax-comparison.php&#34;&gt;KaTeX and MathJax Comparison Demo, currently processed as KaTex&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;repeating-fractions&#34;&gt;Repeating fractions&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;summation-notation&#34;&gt;Summation notation&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;sum-of-a-series&#34;&gt;Sum of a Series&lt;/h2&gt;

&lt;p&gt;I broke up the next two examples into separate lines so it behaves better on a mobile phone. That&#39;s why they include \displaystyle.&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\displaystyle\sum_{i=1}^{k+1}i
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\displaystyle= \left(\sum_{i=1}^{k}i\right) +(k+1)
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\displaystyle= \frac{k(k+1)}{2}+k+1
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\displaystyle= \frac{k(k+1)+2(k+1)}{2}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\displaystyle= \frac{(k+1)(k+2)}{2}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\displaystyle= \frac{(k+1)((k+1)+1)}{2}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;product-notation&#34;&gt;Product notation&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\displaystyle 1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \displaystyle \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \displaystyle\text{ for }\lvert q\rvert &lt; 1.
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;inline-math&#34;&gt;Inline math&lt;/h2&gt;

&lt;p&gt;And here is some in-line math: &lt;span  class=&#34;math&#34;&gt;\( k_{n+1} = n^2 + k_n^2 - k_{n-1} \)&lt;/span&gt; , followed by some more text.&lt;/p&gt;

&lt;h2 id=&#34;greek-letters&#34;&gt;Greek Letters&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\Gamma\ \Delta\ \Theta\ \Lambda\ \Xi\ \Pi\ \Sigma\ \Upsilon\ \Phi\ \Psi\ \Omega
\alpha\ \beta\ \gamma\ \delta\ \epsilon\ \zeta\ \eta\ \theta\ \iota\ \kappa\ \lambda\ \mu\ \nu\ \xi \ \omicron\ \pi\ \rho\ \sigma\ \tau\ \upsilon\ \phi\ \chi\ \psi\ \omega\ \varepsilon\ \vartheta\ \varpi\ \varrho\ \varsigma\ \varphi
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;arrows&#34;&gt;Arrows&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\gets\ \to\ \leftarrow\ \rightarrow\ \uparrow\ \Uparrow\ \downarrow\ \Downarrow\ \updownarrow\ \Updownarrow
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\Leftarrow\ \Rightarrow\ \leftrightarrow\ \Leftrightarrow\ \mapsto\ \hookleftarrow
\leftharpoonup\ \leftharpoondown\ \rightleftharpoons\ \longleftarrow\ \Longleftarrow\ \longrightarrow
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\Longrightarrow\ \longleftrightarrow\ \Longleftrightarrow\ \longmapsto\ \hookrightarrow\ \rightharpoonup
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\rightharpoondown\ \leadsto\ \nearrow\ \searrow\ \swarrow\ \nwarrow
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;symbols&#34;&gt;Symbols&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\surd\ \barwedge\ \veebar\ \odot\ \oplus\ \otimes\ \oslash\ \circledcirc\ \boxdot\ \bigtriangleup
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\bigtriangledown\ \dagger\ \diamond\ \star\ \triangleleft\ \triangleright\ \angle\ \infty\ \prime\ \triangle
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculus&#34;&gt;Calculus&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\int u \frac{dv}{dx}\,dx=uv-\int \frac{du}{dx}v\,dx
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = \int_{-\infty}^\infty \hat f(\xi)\,e^{2 \pi i \xi x}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\oint \vec{F} \cdot d\vec{s}=0
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;lorenz-equations&#34;&gt;Lorenz Equations&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned} \dot{x} &amp; = \sigma(y-x) \\ \dot{y} &amp; = \rho x - y - xz \\ \dot{z} &amp; = -\beta z + xy \end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;cross-product&#34;&gt;Cross Product&lt;/h2&gt;

&lt;p&gt;This works in KaTeX, but the separation of fractions in this environment is not so good.&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \\ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Here&#39;s a workaround: make the fractions smaller with an extra class that targets the spans with &amp;quot;mfrac&amp;quot; class (makes no difference in the MathJax case):&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \\ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;accents&#34;&gt;Accents&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\hat{x}\ \vec{x}\ \ddot{x}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;stretchy-brackets&#34;&gt;Stretchy brackets&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\left(\frac{x^2}{y^3}\right)
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;evaluation-at-limits&#34;&gt;Evaluation at limits&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\left.\frac{x^3}{3}\right|_0^1
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;case-definitions&#34;&gt;Case definitions&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(n) = \begin{cases} \frac{n}{2}, &amp; \text{if } n\text{ is even} \\ 3n+1, &amp; \text{if } n\text{ is odd} \end{cases}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;maxwells-equations&#34;&gt;Maxwell&#39;s Equations&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned} \nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \\ \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \\ \nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \\ \nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;These equations are quite cramped. We can add vertical spacing using (for example) [1em] after each line break (\). as you can see here:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned} \nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \\[1em] \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \\[0.5em] \nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \\[1em] \nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;statistics&#34;&gt;Statistics&lt;/h2&gt;

&lt;p&gt;Definition of combination:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\frac{n!}{k!(n-k)!} = {^n}C_k
{n \choose k}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;fractions-on-fractions&#34;&gt;Fractions on fractions&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\frac{\frac{1}{x}+\frac{1}{y}}{y-z}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;nth-root&#34;&gt;n-th root&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\sqrt[n]{1+x+x^2+x^3+\ldots}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;matrices&#34;&gt;Matrices&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{pmatrix} a_{11} &amp; a_{12} &amp; a_{13}\\ a_{21} &amp; a_{22} &amp; a_{23}\\ a_{31} &amp; a_{32} &amp; a_{33} \end{pmatrix}
\begin{bmatrix} 0 &amp; \cdots &amp; 0 \\ \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; \cdots &amp; 0 \end{bmatrix}
\]&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;punctuation&#34;&gt;Punctuation&lt;/h2&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = \sqrt{1+x} \quad (x \ge -1)
f(x) \sim x^2 \quad (x\to\infty)
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Now with punctuation:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = \sqrt{1+x}, \quad x \ge -1
f(x) \sim x^2, \quad x\to\infty
\]&lt;/span&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Shortcodes Preview</title>
      <link>http://localhost:1313/post/shortcodes-preview/</link>
      <pubDate>Sun, 04 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/shortcodes-preview/</guid>
      
        <description>&lt;h2 id=&#34;what-a-shortcode-is&#34;&gt;What a Shortcode is&lt;/h2&gt;
&lt;p&gt;Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video &lt;code&gt;&amp;lt;iframes&amp;gt;&lt;/code&gt;) to Markdown content. We think this contradicts the beautiful simplicity of Markdown&amp;rsquo;s syntax.&lt;/p&gt;
&lt;p&gt;Hugo created &lt;strong&gt;shortcodes&lt;/strong&gt; to circumvent these limitations.&lt;/p&gt;
&lt;p&gt;A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Note that shortcodes will not work in template files. If you need the type of drop-in functionality that shortcodes provide but in a template, you most likely want a [partial template][partials] instead.&lt;/p&gt;
&lt;p&gt;In addition to cleaner Markdown, shortcodes can be updated any time to reflect new classes, techniques, or standards. At the point of site generation, Hugo shortcodes will easily merge in your changes. You avoid a possibly complicated search and replace operation.&lt;/p&gt;
&lt;p&gt;More details: &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;https://gohugo.io/content-management/shortcodes/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;blockquotes&lt;/h2&gt;
&lt;p&gt;Normal quote:











  





  


&lt;blockquote&gt;
  &lt;p&gt;This is a simple quote.&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
        
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;Quote with author:











  
  
  
  





  


&lt;blockquote&gt;
  &lt;p&gt;This is a quote with only an Author named Author2.&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author2&lt;/strong&gt;
    
      
        
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;Quote with author and source:











  
  
  
  





  


&lt;blockquote&gt;
  &lt;p&gt;This is a quote from Author3 and source &amp;ldquo;source.&amp;rdquo;&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author3&lt;/strong&gt;
    
      &lt;cite&gt;Source&lt;/cite&gt;
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;Quote with author and link:











  
  
  
  





      
      
      
    
     
      
    
    

    
    
  


&lt;blockquote&gt;
  &lt;p&gt;This is a quote from Author4 and links to &lt;a href=&#34;https://www.google.com&#34;&gt;https://www.google.com&lt;/a&gt;.&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author4&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://www.google.com&#34; title=&#34;https://www.google.com&#34;&gt;google.com&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;Quote with author, link and title:











  
  
  
  





  


&lt;blockquote&gt;
  &lt;p&gt;This is a quote from Author5 and links to &lt;a href=&#34;https://www.google.com&#34;&gt;https://www.google.com&lt;/a&gt; with title &amp;ldquo;Google.&amp;rdquo;&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author5&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://www.google.com&#34; title=&#34;https://www.google.com&#34;&gt;Google&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;Quote with author and a link longer than 32 characters, string is first cut at 32 characters then everything after the last forward slash is removed











  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
      
      
    
  


&lt;blockquote&gt;
  &lt;p&gt;This is a quote from Author5 and links to &lt;a href=&#34;https://twitter.com/CryptoGangsta/status/716427930126196737&#34;&gt;https://twitter.com/CryptoGangsta/status/716427930126196737&lt;/a&gt; which is longer than 32 characters.
&lt;!-- raw HTML omitted --&gt;And this is a new line in the quote with the HTML br tag.&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author6&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://twitter.com/CryptoGangsta/status/716427930126196737&#34; title=&#34;https://twitter.com/CryptoGangsta/status/716427930126196737&#34;&gt;twitter.com/CryptoGangsta/...&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;Test from the Octopress blockquote page at: &lt;a href=&#34;http://octopress.org/docs/plugins/blockquote/&#34;&gt;http://octopress.org/docs/plugins/blockquote/&lt;/a&gt;











  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
        
        
      
      
    
  


&lt;blockquote&gt;
  &lt;p&gt;Over the past 24 hours I&amp;rsquo;ve been reflecting on my life &amp;amp; I&amp;rsquo;ve realized only one thing. I need a medieval battle axe.&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;@allanbranch&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://twitter.com/allanbranch/status/90766146063712256&#34; title=&#34;https://twitter.com/allanbranch/status/90766146063712256&#34;&gt;twitter.com/allanbranch/status/...&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;h2 id=&#34;music&#34;&gt;music&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;gist&#34;&gt;gist&lt;/h2&gt;
&lt;p&gt;We can embed the gist in our content via username and gist ID pulled from the URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; gist spf13 7896402 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Display:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/spf13/7896402.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;expand&#34;&gt;expand&lt;/h2&gt;
&lt;p&gt;The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example&lt;/p&gt;
&lt;details&gt;
  &lt;summary style=&#34;background-color:#f5f5f5;border:1px solid #ccc;padding:5px;&#34;&gt;
    Is this learn theme rocks ?
    
  &lt;/summary&gt;
  Yes !.
&lt;/details&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;this shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is “Click to expand”)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; expand &amp;quot;Is this learn theme rocks ?&amp;quot; &amp;gt;}}
Yes !.
{{&amp;lt; /expand &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;youtube&#34;&gt;youtube&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;vimeo&#34;&gt;vimeo&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/146022717&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id=&#34;youku&#34;&gt;youku&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
    &lt;iframe src=&#34;https://player.youku.com/embed/XMzQ0ODUxMjM2NA?autoplay=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; title=&#34;YouKu Video&#34;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Image Preview</title>
      <link>http://localhost:1313/post/image-preview/</link>
      <pubDate>Sat, 03 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/image-preview/</guid>
      
        <description>&lt;p&gt;Thanks for &lt;a href=&#34;https://github.com/liwenyip/hugo-easy-gallery&#34;&gt;liwenyip/hugo-easy-gallery&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/xianmin/hugo-theme-jane/pull/48&#34;&gt;Zebradil · Pull Request #48&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Now, we could use &lt;code&gt;{{&amp;lt; gallery &amp;gt;}}&lt;/code&gt; shortcode in hugo-theme-jane.&lt;/p&gt;
&lt;h2 id=&#34;normal-image&#34;&gt;Normal Image&lt;/h2&gt;
&lt;p&gt;This is an image in &lt;code&gt;static/image&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;![&lt;span style=&#34;color:#f92672&#34;&gt;This is an image in `static/image` folder.&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;/image/example.jpg&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-figure--shortcode&#34;&gt;&lt;code&gt;{{&amp;lt; figure &amp;gt;}}&lt;/code&gt; shortcode&lt;/h2&gt;
&lt;h3 id=&#34;figure-image-with-title&#34;&gt;figure image with title&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; figure src=&amp;quot;/image/example.jpg&amp;quot; title=&amp;quot;figure image with title&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;figure-image-with-caption&#34;&gt;figure image with caption&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; figure src=&amp;quot;/image/example.jpg&amp;quot; caption=&amp;quot;figure image with caption figure image with caption figure image with caption figure image with caption figure image with caption&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;more--figure--shortcode-usage&#34;&gt;more &lt;code&gt;{{&amp;lt; figure &amp;gt;}}&lt;/code&gt; shortcode usage&lt;/h3&gt;
&lt;p&gt;Specifying your image files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{&amp;lt; figure src=&amp;quot;thumb.jpg&amp;quot; link=&amp;quot;image.jpg&amp;quot; &amp;gt;}}&lt;/code&gt; will use &lt;code&gt;thumb.jpg&lt;/code&gt; for thumbnail and &lt;code&gt;image.jpg&lt;/code&gt; for lightbox&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{&amp;lt; figure src=&amp;quot;image.jpg&amp;quot; &amp;gt;}}&lt;/code&gt; or &lt;code&gt;{{&amp;lt; figure link=&amp;quot;image.jpg&amp;quot; &amp;gt;}}&lt;/code&gt; will use &lt;code&gt;image.jpg&lt;/code&gt; for both thumbnail and lightbox&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{&amp;lt; figure link=&amp;quot;image.jpg&amp;quot; thumb=&amp;quot;-small&amp;quot; &amp;gt;}}&lt;/code&gt; will use &lt;code&gt;image-small.jpg&lt;/code&gt; for thumbnail and &lt;code&gt;image.jpg&lt;/code&gt; for lightbox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All the &lt;a href=&#34;https://gohugo.io/extras/shortcodes&#34;&gt;features/parameters&lt;/a&gt; of Hugo&amp;rsquo;s built-in &lt;code&gt;figure&lt;/code&gt; shortcode work as normal, i.e. src, link, title, caption, class, attr (attribution), attrlink, alt&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; (e.g. &lt;code&gt;size=&amp;quot;1024x768&amp;quot;&lt;/code&gt;) pre-defines the image size for PhotoSwipe. Use this option if you don&amp;rsquo;t want to pre-load the linked image to determine its size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt; allows you to set any custom classes you want on the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Optional parameters for standalone &lt;code&gt;{{&amp;lt; figure &amp;gt;}}&lt;/code&gt; shortcodes only (i.e. don&amp;rsquo;t use on &lt;code&gt;{{&amp;lt; figure &amp;gt;}}&lt;/code&gt; inside &lt;code&gt;{{&amp;lt; gallery &amp;gt;}}&lt;/code&gt; - strange things may happen if you do):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;caption-position&lt;/code&gt; and &lt;code&gt;caption-effect&lt;/code&gt; work the same as for the &lt;code&gt;{{&amp;lt; gallery &amp;gt;}}&lt;/code&gt; shortcode (see below).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; defines the &lt;a href=&#34;https://www.w3schools.com/cssref/pr_dim_max-width.asp&#34;&gt;&lt;code&gt;max-width&lt;/code&gt;&lt;/a&gt; of the image displayed on the page. If using a thumbnail for a standalone figure, set this equal to your thumbnail&amp;rsquo;s native width to make the captions behave properly (or feel free to come up with a better solution and submit a pull request :-)). Also use this option if you don&amp;rsquo;t have a thumbnail and you don&amp;rsquo;t want the hi-res image to take up the entire width of the screen/container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class=&amp;quot;no-photoswipe&amp;quot;&lt;/code&gt; prevents a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; from being loaded into PhotoSwipe. If you click on the figure you&amp;rsquo;ll instead a good ol&amp;rsquo; fashioned hyperlink to a bigger image (or - if you haven&amp;rsquo;t specified a bigger image - the same one).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-gallery--shortcode&#34;&gt;&lt;code&gt;{{&amp;lt; gallery &amp;gt;}}&lt;/code&gt; shortcode&lt;/h2&gt;
&lt;h3 id=&#34;simple-gallery&#34;&gt;simple gallery&lt;/h3&gt;
&lt;p&gt;To specify a directory of image files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; gallery dir=&amp;quot;/img/your-directory-of-images/&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;The images are automatically captioned with the file name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[image].jpg&lt;/code&gt; is used for the hi-res image, and &lt;code&gt;[image]-thumb.jpg&lt;/code&gt; is used for the thumbnails.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;[image]-thumb.jpg&lt;/code&gt; doesn&amp;rsquo;t exist, then &lt;code&gt;[image].jpg&lt;/code&gt; will be used for both hi-res and thumbnail images.&lt;/li&gt;
&lt;li&gt;The default thumbnail suffix is &lt;code&gt;-thumb&lt;/code&gt;, but you can specify a different one e.g. &lt;code&gt;thumb=&amp;quot;-small&amp;quot;&lt;/code&gt; or &lt;code&gt;thumb=&amp;quot;_150x150&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;to-specify-individual-image-files&#34;&gt;To specify individual image files&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; gallery &amp;gt;}}
  {{&amp;lt; figure src=&amp;quot;image1.jpg&amp;quot; &amp;gt;}}
  {{&amp;lt; figure src=&amp;quot;image2.jpg&amp;quot; &amp;gt;}}
  {{&amp;lt; figure src=&amp;quot;image3.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; /gallery &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Optional parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;caption-position&lt;/code&gt; - determines the captions&amp;rsquo; position over the image. Options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bottom&lt;/code&gt; (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt; hides captions on the page (they will only show in PhotoSwipe)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caption-effect&lt;/code&gt; - determines if/how captions appear upon hover. Options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slide&lt;/code&gt; (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fade&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt; (captions always visible)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hover-effect&lt;/code&gt; - determines if/how images change upon hover. Options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zoom&lt;/code&gt; (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shrink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slideup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slidedown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hover-transition&lt;/code&gt; - determines if/how images change upon hover. Options:
&lt;ul&gt;
&lt;li&gt;not set - smooth transition (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt; - hard transition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Shortcodes Notice Preview</title>
      <link>http://localhost:1313/post/shortcode-notice/</link>
      <pubDate>Sat, 03 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/shortcode-notice/</guid>
      
        <description>&lt;h2 id=&#34;normal-use&#34;&gt;normal use&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Note&lt;/code&gt; example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shortcode&#34; data-lang=&#34;shortcode&#34;&gt;{{% notice note %}}
A notice disclaimer
{{% /notice %}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;You could &lt;strong&gt;custom title&lt;/strong&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shortcode&#34; data-lang=&#34;shortcode&#34;&gt;{{% notice note 笔记 %}}
A notice disclaimer
{{% /notice %}}
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;tip&#34;&gt;tip&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shortcode&#34; data-lang=&#34;shortcode&#34;&gt;{{% notice tip %}}
A tip disclaimer
{{% /tip %}}
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;info&#34;&gt;info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shortcode&#34; data-lang=&#34;shortcode&#34;&gt;{{% notice info %}}
A info disclaimer
{{% /notice %}}
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;warning&#34;&gt;warning&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shortcode&#34; data-lang=&#34;shortcode&#34;&gt;{{% notice warning %}}
A warning disclaimer
{{% /notice %}}
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
</description>
      
    </item>
    
  </channel>
</rss>
