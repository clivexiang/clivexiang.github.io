<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on clive xiang 的博客</title>
    <link>http://localhost:1313/tags/go/</link>
    <description>Recent content in go on clive xiang 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 21 Oct 2020 21:18:22 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 方法</title>
      <link>http://localhost:1313/post/go/go-methods/</link>
      <pubDate>Wed, 21 Oct 2020 21:18:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-methods/</guid>
      <description>Go 没有类。不过你可以为结构体类型定义方法。 方法就是一类带特殊的 接收者 参数的函数。 方法接收者在它自己的参数列表内，位于 func 关键字和方法名之间。 在</description>
    </item>
    
    <item>
      <title>Go Map</title>
      <link>http://localhost:1313/post/go/go-map/</link>
      <pubDate>Wed, 21 Oct 2020 21:13:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-map/</guid>
      <description>映射的文法 映射的文法与结构体相似，不过必须有键名。 map-literals.go package main import &amp;quot;fmt&amp;quot; type Vertex struct { Lat, Long float64 } var m = map[string]Vertex{ &amp;quot;Bell Labs&amp;quot;: Vertex{ 40.68433, -74.39967, }, &amp;quot;Google&amp;quot;: Vertex{ 37.42202, -122.08408, }, } func main() { fmt.Println(m) } 若顶级类型只是一个类型</description>
    </item>
    
    <item>
      <title>Go Pointer</title>
      <link>http://localhost:1313/post/go/go-pointer/</link>
      <pubDate>Wed, 21 Oct 2020 20:54:41 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-pointer/</guid>
      <description>Go 拥有指针。指针保存了值的内存地址。 类型 *T 是指向 T 类型值的指针。其零值为 nil。 var p *int &amp;amp; 操作符会生成一个指向其操作数的指针。 i := 42 p = &amp;amp;i * 操</description>
    </item>
    
    <item>
      <title>Go Struct</title>
      <link>http://localhost:1313/post/go/go-struct/</link>
      <pubDate>Wed, 21 Oct 2020 19:54:41 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-struct/</guid>
      <description>一个结构体（struct）就是一组字段（field） structs.go package main import &amp;quot;fmt&amp;quot; type Vertex struct { X int Y int } func main() { fmt.Println(Vertex{1, 2}) } 结构体字段使用点号来访问。 struct-fields.go package main import &amp;quot;fmt&amp;quot; type Vertex struct { X int</description>
    </item>
    
    <item>
      <title>Go Defer</title>
      <link>http://localhost:1313/post/go/go-defer/</link>
      <pubDate>Tue, 20 Oct 2020 20:10:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-defer/</guid>
      <description>defer 语句会将函数推迟到外层函数返回之后执行。 推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。 defer.go package main import &amp;quot;fmt&amp;quot; func main() { defer fmt.Println(&amp;quot;world&amp;quot;) fmt.Println(&amp;quot;hello&amp;quot;) } defer</description>
    </item>
    
    <item>
      <title>Go For</title>
      <link>http://localhost:1313/post/go/go-for/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-for/</guid>
      <description>Go 只有一种循环结构：for 循环。 基本的 for 循环由三部分组成，它们用分号隔开： 初始化语句：在第一次迭代前执行 条件表达式：在每次迭代前求值 后置语句</description>
    </item>
    
    <item>
      <title>Go if</title>
      <link>http://localhost:1313/post/go/go-if/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-if/</guid>
      <description>Go 的 if 语句与 for 循环类似，表达式外无需小括号 ( ) ，而大括号 { } 则是必须的。 if.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) func sqrt(x float64) string { if x &amp;lt; 0 { return sqrt(-x) + &amp;quot;i&amp;quot; } return fmt.Sprint(math.Sqrt(x)) } func main() { fmt.Println(sqrt(2), sqrt(-4)) } if 的</description>
    </item>
    
    <item>
      <title>Go Pakage</title>
      <link>http://localhost:1313/post/go/go-pakage/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-pakage/</guid>
      <description>每个 Go 程序都是由包构成的。 程序从 main 包开始运行。 本程序通过导入路径 &amp;ldquo;fmt&amp;rdquo; 和 &amp;ldquo;math/rand&amp;rdquo; 来使用这两个包。 按照约定，包名与导入路径的最后一个元素一致。例如，&amp;l</description>
    </item>
    
    <item>
      <title>Go switch</title>
      <link>http://localhost:1313/post/go/go-switch/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-switch/</guid>
      <description>switch 的求值顺序 switch 的 case 语句从上到下顺次执行，直到匹配成功时停止。 （例如， switch i { case 0: case f(): } 在 i==0 时 f 不会被调用。） switch-evaluation-order.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func main() { fmt.Println(&amp;quot;When&#39;s Saturday?&amp;quot;) today := time.Now().Weekday() switch</description>
    </item>
    
    <item>
      <title>Go 基本数据类型 变量</title>
      <link>http://localhost:1313/post/go/go-type/</link>
      <pubDate>Tue, 20 Oct 2020 20:04:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go/go-type/</guid>
      <description>变量 var 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后。 就像在这个例子中看到的一样，var 语句可以出现在包或函数级别。 variables.go package main import &amp;quot;fmt&amp;quot; var</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>http://localhost:1313/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/creating-a-new-theme/</guid>
      <description>draft: true
Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://localhost:1313/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/goisforlovers/</guid>
      <description>draft: true Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://localhost:1313/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/hugoisforlovers/</guid>
      <description>draft: true
Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://localhost:1313/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>